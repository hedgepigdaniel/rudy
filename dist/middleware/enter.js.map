{"version":3,"sources":["../../src/middleware/enter.js"],"names":["api","req","next","route","redirect","res","enter","getKind","resolveFirstRouteOnEnter","setTimeout","then","ctx","busy","clientLoadBusy"],"mappings":";;;;;;;AAAA;;AACA;;;;;;eAEe,kBAACA,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAS,iBAAOC,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAClBD,GAAG,CAACE,KAAJ,CAAUC,QADQ;AAAA;AAAA;AAAA;;AAAA,iDAEb,8BAAiBH,GAAjB,CAFa;;AAAA;AAKhBI,gBAAAA,GALgB,GAKVJ,GAAG,CAACK,KAAJ,EALU,EAKE;AAExB;AACA;;AARsB,sBASlBL,GAAG,CAACM,OAAJ,OAAkB,MAAlB,IAA4B,CAAC,sBAA7B,IAA2CP,GAAG,CAACQ,wBAT7B;AAAA;AAAA;AAAA;;AAUpBC,gBAAAA,UAAU,CAAC,YAAM;AACfP,kBAAAA,IAAI,GAAGQ,IAAP,CAAY,YAAM;AAChBT,oBAAAA,GAAG,CAACU,GAAJ,CAAQC,IAAR,GAAe,KAAf;AACD,mBAFD;AAGD,iBAJS,EAIP,CAJO,CAAV,CAVoB,CAcd;AAEN;AACA;AACA;;AACAX,gBAAAA,GAAG,CAACY,cAAJ,GAAqB,IAArB;AAnBoB,iDAoBbR,GApBa;;AAAA;AAAA,iDAuBfA,GAAG,CAACK,IAAJ,CAASR,IAAT,EAAeQ,IAAf,CAAoB;AAAA,yBAAML,GAAN;AAAA,iBAApB,CAvBe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C","sourcesContent":["import { isServer } from '@respond-framework/utils'\nimport { redirectShortcut } from '../utils'\n\nexport default (api) => async (req, next) => {\n  if (req.route.redirect) {\n    return redirectShortcut(req)\n  }\n\n  const res = req.enter() // commit history + action to state\n\n  // return early on `load` so rendering can happen ASAP\n  // i.e. before `thunk` is called but after potentially async auth in `beforeEnter`\n  if (req.getKind() === 'load' && !isServer() && api.resolveFirstRouteOnEnter) {\n    setTimeout(() => {\n      next().then(() => {\n        req.ctx.busy = false\n      })\n    }, 0) // insure callbacks like `onEnter` are called after `ReactDOM.render`, which should immediately be called after dispatching `firstRoute()`\n\n    // in `createRouter.js` this flag will indicate to keep the pipeline still \"busy\" so\n    // that dispatches in `thunk` and other callbacks after `enter` are treated as redirects,\n    // as automatically happens throughout the pipeline. It becomes unbusy in the timeout above.\n    req.clientLoadBusy = true\n    return res\n  }\n\n  return res.then(next).then(() => res)\n}\n"],"file":"enter.js"}