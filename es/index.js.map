{"version":3,"sources":["../src/index.ts"],"names":["ScrollBehavior","ScrollPosition","supportsSessionStorage","RudyScrollRestorer","api","options","entry","scrollBehaviorKey","location","key","JSON","stringify","value","window","sessionStorage","setItem","makeStorageKey","savedItem","getItem","parse","getLocation","entries","index","action","request","next","lastRequest","prev","Object","keys","transitionHooks","forEach","hookIndex","behavior","startIgnoringScrollEvents","stopIgnoringScrollEvents","updateScroll","addTransitionHook","hook","nextHookIndex","stateStorage","save","saveScrollPosition","read","readScrollPosition","getCurrentLocation","shouldUpdateScroll","_"],"mappings":"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","sourcesContent":["/* eslint-env browser */\nimport ScrollBehavior, {\n  TransitionHook,\n  ScrollPosition,\n  ScrollTarget,\n} from 'scroll-behavior'\nimport {\n  Api,\n  Middleware,\n  LocationEntry,\n  FluxStandardRoutingAction,\n  Request,\n  ScrollRestorer,\n  ScrollRestorerCreator,\n} from '@respond-framework/types'\nimport { supportsSessionStorage } from '@respond-framework/utils'\n\nexport { ScrollPosition } from 'scroll-behavior'\n\nexport type ShouldUpdateScroll<Action extends FluxStandardRoutingAction> = (\n  request: Request<Action>,\n) => ScrollTarget\n\nexport type RestoreScrollOptions<Action extends FluxStandardRoutingAction> = {\n  shouldUpdateScroll?: ShouldUpdateScroll<Action>\n}\n\ntype Location<Action extends FluxStandardRoutingAction> = LocationEntry<\n  Action\n> & {\n  action: 'unknown'\n}\n\nexport class RudyScrollRestorer<Action extends FluxStandardRoutingAction>\n  implements ScrollRestorer<Action> {\n  private options: RestoreScrollOptions<Action>\n\n  private behavior: ScrollBehavior<Location<Action>, Request<Action>>\n\n  private lastRequest?: Request<Action>\n\n  private api: Api<Action>\n\n  private transitionHooks: { [index: string]: TransitionHook } = {}\n\n  private nextHookIndex = 0\n\n  private makeStorageKey = (\n    entry: LocationEntry<Action> | null,\n    scrollBehaviorKey: string | null,\n  ): string =>\n    `@@rudy-restore-scroll/${\n      entry ? `${entry.location.key}/` : ``\n    }${JSON.stringify(scrollBehaviorKey)}`\n\n  private saveScrollPosition = (\n    entry: LocationEntry<Action>,\n    key: string | null,\n    value: ScrollPosition,\n  ): void => {\n    if (!supportsSessionStorage()) {\n      return\n    }\n    window.sessionStorage.setItem(\n      this.makeStorageKey(entry, key),\n      JSON.stringify(value),\n    )\n  }\n\n  readScrollPosition = (\n    entry: LocationEntry<Action>,\n    key: string | null,\n  ): ScrollPosition | null => {\n    if (!supportsSessionStorage()) {\n      return null\n    }\n    const savedItem = window.sessionStorage.getItem(\n      this.makeStorageKey(entry, key),\n    )\n    if (savedItem === null) {\n      return null\n    }\n    try {\n      return JSON.parse(savedItem)\n    } catch {\n      return null\n    }\n  }\n\n  constructor(api: Api<Action>, options: RestoreScrollOptions<Action> = {}) {\n    this.api = api\n    this.options = options\n    this.behavior = new ScrollBehavior<Location<Action>, Request<Action>>({\n      addTransitionHook: (hook: TransitionHook) => {\n        const hookIndex = this.nextHookIndex\n        this.nextHookIndex += 1\n        this.transitionHooks[hookIndex] = hook\n        return () => {\n          delete this.transitionHooks[hookIndex]\n        }\n      },\n      stateStorage: {\n        save: this.saveScrollPosition,\n        read: this.readScrollPosition,\n      },\n      getCurrentLocation: () => this.getCurrentLocation(),\n      shouldUpdateScroll: (_, request) => {\n        if (!this.options.shouldUpdateScroll) {\n          return true // default behaviour\n        }\n        return this.options.shouldUpdateScroll(request)\n      },\n    })\n  }\n\n  private getCurrentLocation = (): Location<Action> => {\n    const location = this.api.getLocation()\n    return {\n      ...location.entries[location.index],\n      action: 'unknown',\n    }\n  }\n\n  saveScroll: Middleware<Action> = () => {\n    return (request, next) => {\n      this.lastRequest = request\n      const { action } = request\n      if (!('location' in action && action.location.prev)) {\n        // If there is no previous location, there is no position to save\n        return next()\n      }\n      Object.keys(this.transitionHooks).forEach((hookIndex) => {\n        this.transitionHooks[hookIndex]()\n      })\n      this.behavior.startIgnoringScrollEvents()\n      return next()\n    }\n  }\n\n  restoreScroll: Middleware<Action> = () => {\n    return (request, next) => {\n      this.behavior.stopIgnoringScrollEvents()\n      this.behavior.updateScroll(null, request)\n      return next()\n    }\n  }\n\n  updateScroll = (): void => {\n    if (this.lastRequest) {\n      this.behavior.updateScroll(null, this.lastRequest)\n    }\n  }\n}\n\nexport default <Action extends FluxStandardRoutingAction>(\n  options?: RestoreScrollOptions<Action>,\n): ScrollRestorerCreator<Action> => (api) =>\n  new RudyScrollRestorer(api, options)\n"],"file":"index.js"}