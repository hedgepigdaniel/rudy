{"version":3,"sources":["../../src/middleware/pathlessRoute.js"],"names":["call","names","api","middlewares","map","name","runOnServer","skipOpts","pipeline","options","compose","register","req","next","route","isPathless","path","hasCallback","dispatch","action","commitDispatch","then","res","find"],"mappings":"AAAA,SAASA,IAAT,QAAqB,SAArB;AAEA,gBAAe;AAAA,oCAAIC,KAAJ;AAAIA,IAAAA,KAAJ;AAAA;;AAAA,SAAc,UAACC,GAAD,EAAS;AACpCD,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,IAAY,OAAvB;AACAA,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAL,IAAY,YAAvB;AAEA,QAAME,WAAW,GAAGF,KAAK,CAACG,GAAN,CAAU,UAACC,IAAD;AAAA,aAC5BL,IAAI,CAACK,IAAD,EAAO;AAAEC,QAAAA,WAAW,EAAE,IAAf;AAAqBC,QAAAA,QAAQ,EAAE;AAA/B,OAAP,CADwB;AAAA,KAAV,CAApB;AAIA,QAAMC,QAAQ,GAAGN,GAAG,CAACO,OAAJ,CAAYC,OAAZ,CACfP,WADe,EAEfD,GAFe,CAAjB,CARoC,CAapC;AACA;AACA;AACA;;AACAA,IAAAA,GAAG,CAACS,QAAJ,CAAa,eAAb;AAEA,WAAO,UAACC,GAAD,EAAMC,IAAN,EAAe;AAAA,UACZC,KADY,GACFF,GADE,CACZE,KADY;AAEpB,UAAMC,UAAU,GAAGD,KAAK,IAAI,CAACA,KAAK,CAACE,IAAnC;;AAEA,UAAID,UAAU,IAAIE,WAAW,CAACH,KAAD,EAAQb,KAAR,CAA7B,EAA6C;AAC3C,YAAIa,KAAK,CAACI,QAAN,KAAmB,KAAvB,EAA8B;AAC5BN,UAAAA,GAAG,CAACO,MAAJ,GAAaP,GAAG,CAACQ,cAAJ,CAAmBR,GAAG,CAACO,MAAvB,CAAb;AACD;;AAED,eAAOX,QAAQ,CAACI,GAAD,CAAR,CAAcS,IAAd,CAAmB,UAACC,GAAD;AAAA,iBAASA,GAAG,IAAIV,GAAG,CAACO,MAApB;AAAA,SAAnB,CAAP;AACD;;AAED,aAAON,IAAI,EAAX;AACD,KAbD;AAcD,GAjCc;AAAA,CAAf;;AAmCA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACH,KAAD,EAAQb,KAAR;AAAA,SAClBA,KAAK,CAACsB,IAAN,CAAW,UAAClB,IAAD;AAAA,WAAU,OAAOS,KAAK,CAACT,IAAD,CAAZ,KAAuB,UAAjC;AAAA,GAAX,CADkB;AAAA,CAApB","sourcesContent":["import { call } from './index'\n\nexport default (...names) => (api) => {\n  names[0] = names[0] || 'thunk'\n  names[1] = names[1] || 'onComplete'\n\n  const middlewares = names.map((name) =>\n    call(name, { runOnServer: true, skipOpts: true }),\n  )\n\n  const pipeline = api.options.compose(\n    middlewares,\n    api,\n  )\n\n  // Registering is currently only used when core features (like the\n  // `addRoutes` action creator) depend on the middleware being available.\n  // See `utils/formatRoutes.js` for how `has` is used to throw\n  // errors when not available.\n  api.register('pathlessRoute')\n\n  return (req, next) => {\n    const { route } = req\n    const isPathless = route && !route.path\n\n    if (isPathless && hasCallback(route, names)) {\n      if (route.dispatch !== false) {\n        req.action = req.commitDispatch(req.action)\n      }\n\n      return pipeline(req).then((res) => res || req.action)\n    }\n\n    return next()\n  }\n}\n\nconst hasCallback = (route, names) =>\n  names.find((name) => typeof route[name] === 'function')\n"],"file":"pathlessRoute.js"}