{"version":3,"sources":["../../src/pathlessRoutes/callHistory.js"],"names":["env","process","NODE_ENV","req","history","has","dispatch","payload","action","Error","method","args","handleEdgeCaseForSet","ctx","tmp","commitDispatch","pending","committed","isOnlySetState","prevState","location","prev","state","Object","assign","set","commit","_dispatched","then","keys","length"],"mappings":";;;;;;;;;;;;AASA,IAAMA,GAAG,GAAGC,OAAO,CAACD,GAAR,CAAYE,QAAxB;AAEA,gBAAe,UAACC,GAAD,EAA4C;AAAA,MAEvDC,OAFuD,GAMrDD,GANqD,CAEvDC,OAFuD;AAAA,MAGvDC,GAHuD,GAMrDF,GANqD,CAGvDE,GAHuD;AAAA,MAIvDC,QAJuD,GAMrDH,GANqD,CAIvDG,QAJuD;AAAA,MAK7CC,OAL6C,GAMrDJ,GANqD,CAKvDK,MALuD,CAK7CD,OAL6C;;AAQzD,MAAIP,GAAG,KAAK,aAAR,IAAyB,CAACK,GAAG,CAAC,eAAD,CAAjC,EAAoD;AAClD,UAAM,IAAII,KAAJ,CACJ,+EADI,CAAN;AAGD;;AAZwD,MAcjDC,MAdiD,GAchCH,OAdgC,CAcjDG,MAdiD;AAAA,MAczCC,IAdyC,GAchCJ,OAdgC,CAczCI,IAdyC;AAgBzD,MAAID,MAAM,KAAK,KAAf,EAAsB,OAAOE,oBAAoB,CAACT,GAAD,EAAMQ,IAAN,CAA3B;AAEtB,MAAMH,MAAM,GAAGJ,OAAO,CAACM,MAAD,CAAP,OAAAN,OAAO,qBAAYO,IAAZ,UAAkB,KAAlB,GAAtB;AACA,SAAOL,QAAQ,CAACE,MAAD,CAAf;AACD,CApBD,E,CAsBA;AACA;AACA;AACA;AACA;;AAEA,IAAMI,oBAAoB,GAAG,SAAvBA,oBAAuB,OAE3BD,IAF2B,EAGxB;AAAA,MAFDE,GAEC,QAFDA,GAEC;AAAA,MAFIC,GAEJ,QAFIA,GAEJ;AAAA,MAFSC,cAET,QAFSA,cAET;AAAA,MAFyBX,OAEzB,QAFyBA,OAEzB;;AACH,MAAIS,GAAG,CAACG,OAAJ,IAAe,CAACF,GAAG,CAACG,SAAxB,EAAmC;AACjC,QAAI,CAACC,cAAc,CAACP,IAAI,CAAC,CAAD,CAAL,CAAnB,EAA8B;AAC5B,YAAM,IAAIF,KAAJ,CACJ,8DADI,CAAN;AAGD,KALgC,CAOjC;;;AACA,QAAMU,SAAS,GAAGN,GAAG,CAACG,OAAJ,CAAYR,MAAZ,CAAmBY,QAAnB,CAA4BC,IAA5B,CAAiCC,KAAnD;AACAC,IAAAA,MAAM,CAACC,MAAP,CAAcL,SAAd,EAAyBR,IAAI,CAAC,CAAD,CAAJ,CAAQW,KAAjC;AACD;;AAXE,qBAa2BlB,OAAO,CAACqB,GAAR,OAAArB,OAAO,qBAAQO,IAAR,UAAc,KAAd,GAblC;AAAA,MAaKe,MAbL,gBAaKA,MAbL;AAAA,MAagBlB,MAbhB,uDAeH;AACA;;;AACAO,EAAAA,cAAc,CAACP,MAAD,CAAd;AACAA,EAAAA,MAAM,CAACmB,WAAP,GAAqB,IAArB,CAlBG,CAkBuB;;AAC1B,SAAOD,MAAM,CAAClB,MAAD,CAAN,CAAeoB,IAAf,CAAoB;AAAA,WAAMpB,MAAN;AAAA,GAApB,CAAP;AACD,CAvBD;;AAyBA,IAAMU,cAAc,GAAG,SAAjBA,cAAiB,CAACV,MAAD;AAAA,SACrBA,MAAM,CAACc,KAAP,IAAgBC,MAAM,CAACM,IAAP,CAAYrB,MAAZ,EAAoBsB,MAApB,KAA+B,CAD1B;AAAA,CAAvB","sourcesContent":["// @flow\nimport type {\n  Dispatch,\n  Action,\n  Options,\n  Routes,\n  HistoryActionDispatcher,\n} from '../flow-types'\n\nconst env = process.env.NODE_ENV\n\nexport default (req: HistoryActionDispatcher): Dispatch => {\n  const {\n    history,\n    has,\n    dispatch,\n    action: { payload },\n  } = req\n\n  if (env === 'development' && !has('pathlessRoute')) {\n    throw new Error(\n      '[rudy] \"pathlessRoute\" middleware is required to use history action creators.',\n    )\n  }\n\n  const { method, args } = payload\n\n  if (method === 'set') return handleEdgeCaseForSet(req, args)\n\n  const action = history[method](...args, false)\n  return dispatch(action)\n}\n\n// only state can be set before route change is committed,\n// as otherwise the prev URL would change and break BrowserHistory entries tracking\n// NOTE: we could greatly change the implementation to support this small thing, but its not worth the complexity;\n// even just supporting setState on a previous route (while in the pipeline) is frill, but we'll soon see if people\n// get use out of it.\n\nconst handleEdgeCaseForSet = (\n  { ctx, tmp, commitDispatch, history }: Object,\n  args: Array<Object>,\n) => {\n  if (ctx.pending && !tmp.committed) {\n    if (!isOnlySetState(args[0])) {\n      throw new Error(\n        '[rudy] you can only set state on a previous url before enter',\n      )\n    }\n\n    // mutable workaround to insure state is applied to ongoing action\n    const prevState = ctx.pending.action.location.prev.state\n    Object.assign(prevState, args[0].state)\n  }\n\n  const { commit, ...action } = history.set(...args, false)\n\n  // unlike other actions, sets go straight to reducer (and browser history) and skip pipeline.\n  // i.e. it's purpose is to be a \"hard\" set\n  commitDispatch(action)\n  action._dispatched = true // insure autoDispatch is prevented since its dispatched already here (similar to the implementation of `request.dispatch`)\n  return commit(action).then(() => action)\n}\n\nconst isOnlySetState = (action) =>\n  action.state && Object.keys(action).length === 1\n"],"file":"callHistory.js"}