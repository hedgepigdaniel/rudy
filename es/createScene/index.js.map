{"version":3,"sources":["../../src/createScene/index.js"],"names":["camelCase","logExports","makeActionCreator","formatRoute","routesMap","opts","sc","scene","bn","basename","formatter","subtypes","st","log","prefix","keys","Object","result","reduce","t","types","actions","routes","t2","tc","te","route","tClean","replace","action","Array","isArray","key","forEach","name","suffix","toUpperCase","cleanType","realType","test","process","env","NODE_ENV","exportString"],"mappings":"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","sourcesContent":["// @flow\nimport type { RoutesMapInput, CreateActionsOptions } from '../flow-types'\n\nimport { camelCase, logExports, makeActionCreator, formatRoute } from './utils'\n\nexport default (routesMap: RoutesMapInput, opts: CreateActionsOptions = {}) => {\n  const {\n    scene: sc,\n    basename: bn,\n    formatRoute: formatter,\n    subtypes: st = [],\n    logExports: log,\n  } = opts\n\n  const scene = sc || ''\n  const prefix = scene ? `${scene}/` : ''\n  const keys = Object.keys(routesMap)\n  const subtypes = [...st, 'start', 'complete', 'error', 'done']\n\n  const result = keys.reduce(\n    (result, t) => {\n      const { types, actions, routes } = result\n\n      const t2 = `${prefix}${t}`\n      const tc = `${prefix}${t}_COMPLETE`\n      const te = `${prefix}${t}_ERROR`\n\n      routes[t2] = formatRoute(routesMap[t], t2, routesMap, formatter)\n\n      const route = routes[t2]\n      const tClean = route.scene ? t2.replace(`${route.scene}/`, '') : t // strip the scene so types will be un-prefixed (NOTE: this is normalization for if routes pass through `createScene` twice)\n      const action = camelCase(tClean)\n\n      types[tClean] = t2\n      types[`${tClean}_COMPLETE`] = tc\n      types[`${tClean}_ERROR`] = te\n\n      // allow for creating custom action creators (whose names are an array assigned to route.action)\n      if (Array.isArray(route.action)) {\n        const key = route.action[0]\n        actions[action] = makeActionCreator(route, t2, key, bn) // the first action in the array becomes the primary action creator\n\n        // all are tacked on like action.complete, action.error\n        route.action.forEach((key: string) => {\n          actions[action][key] = makeActionCreator(route, t2, key, bn)\n        })\n      } else {\n        actions[action] = makeActionCreator(route, t2, 'action', bn)\n      }\n\n      subtypes.forEach((name) => {\n        const suffix = `_${name.toUpperCase()}`\n        const cleanType = `${tClean}${suffix}`\n        const realType = `${prefix}${t}${suffix}`\n\n        types[cleanType] = realType\n        actions[action][name] = makeActionCreator(\n          route,\n          realType,\n          name,\n          bn,\n          subtypes,\n        )\n      })\n\n      return result\n    },\n    { types: {}, actions: {}, routes: {} },\n  )\n\n  const { types, actions } = result\n  // $FlowFixMe\n  if (log && /^(development|test)$/.test(process.env.NODE_ENV)) {\n    result.exportString = logExports(types, actions, result.routes, opts)\n  }\n\n  return result\n}\n"],"file":"index.js"}