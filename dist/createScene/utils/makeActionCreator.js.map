{"version":3,"sources":["../../../src/createScene/utils/makeActionCreator.js"],"names":["route","type","key","basename","subtypes","ac","defaultCreator","arg","info","thunk","undefined","then","state","act","t","name","includes","path"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;;;;;;;eAEe,kBACbA,KADa,EAEbC,IAFa,EAGbC,GAHa,EAIbC,QAJa,EAMV;AAAA,MADHC,QACG,uEADuB,EACvB;AACH,MAAMC,EAAE,GAAG,OAAOL,KAAK,CAACE,GAAD,CAAZ,KAAsB,UAAtB,GAAmCF,KAAK,CAACE,GAAD,CAAxC,GAAgD,IAA3D,CADG,CAC6D;AAEhE;;AACA,MAAMI,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD,EAAyBC,IAAzB,EAA2C;AAAA;;AAChE;AACA,QAAI,OAAOD,GAAP,KAAe,UAAnB,EAA+B;AAC7B,UAAME,KAAe,GAAGF,GAAxB;AACA,aAAO;AAAA,eAAyBD,cAAc,CAACG,KAAK,MAAL,mBAAD,EAAiB,SAAjB,CAAvC;AAAA,OAAP;AACD,KAL+D,CAOhE;;;AACA,QAAID,IAAI,KAAK,SAAT,IAAsBD,GAAG,KAAKG,SAAlC,EAA6C,OARmB,CAUhE;;AACA,QAAIF,IAAI,KAAK,SAAT,IAAsBD,GAAtB,IAA6BA,GAAG,CAACI,IAArC,EAA2C,OAAOJ,GAAP,CAXqB,CAahE;;AACA,QAAI,uBAAWN,IAAX,CAAJ,EAAsB;AACpB,UAAMW,KAAK,GAAGL,GAAd;AACA,UAAMM,GAAG,GAAG,uBAASD,KAAT,EAAgBX,IAAhB,CAAZ;AACA,UAAIE,QAAJ,EAAcU,GAAG,CAACV,QAAJ,GAAeA,QAAf;AACd,aAAOU,GAAP;AACD,KAnB+D,CAqBhE;;;AACA,QAAMC,CAAC,GAAIP,GAAG,IAAIA,GAAG,CAACN,IAAZ,IAAqBA,IAA/B;AACA,QAAIC,GAAG,KAAK,OAAZ,EAAqB,OAAO,wBAAYK,GAAZ,EAAiBO,CAAjB,EAAoBX,QAApB,CAAP,CAvB2C,CAyBhE;;AACA,QAAI,qBAASI,GAAT,CAAJ,EAAmB;AAASN,MAAAA,IAAI,EAAJA,IAAT;AAAeE,MAAAA,QAAQ,EAARA;AAAf,OAA4BI,GAA5B,EA1B6C,CA4BhE;;AACA,QAAMQ,IAAI,GAAGX,QAAQ,CAACY,QAAT,CAAkBd,GAAlB,KAA0B,CAACF,KAAK,CAACiB,IAAjC,GAAwC,SAAxC,GAAoD,QAAjE,CA7BgE,CA6BU;;AAC1E;AAAShB,MAAAA,IAAI,EAAJA;AAAT,6BAAgBc,IAAhB,EAAuBR,GAAG,IAAI,EAA9B,qCAAkCJ,QAAlC;AACD,GA/BD,CAJG,CAqCH;;;AACA,MAAIE,EAAJ,EAAQ;AACN,WAAO;AAAA,aAAyBC,cAAc,CAACD,EAAE,MAAF,mBAAD,CAAvC;AAAA,KAAP;AACD,GAxCE,CA0CH;;;AACA,SAAOC,cAAP;AACD,C","sourcesContent":["// @flow\n\nimport { isAction, isNotFound } from '../../utils'\nimport { notFound } from '../../actions'\nimport { handleError } from './index'\n\nexport default (\n  route: Object, // primary type\n  type: string,\n  key: ?string,\n  basename: ?string,\n  subtypes: Array<string> = [],\n) => {\n  const ac = typeof route[key] === 'function' ? route[key] : null // look for action creators on route\n\n  // `info` arg contains 'isThunk' or optional `path` for `notFound` action creators\n  const defaultCreator = (arg: Object | Function, info: ?string) => {\n    // optionally handle action creators that return functions (aka `thunk`)\n    if (typeof arg === 'function') {\n      const thunk: Function = arg\n      return (...args: Array<any>) => defaultCreator(thunk(...args), 'isThunk')\n    }\n\n    // do nothing if a `thunk` returned nothing (i.e. manually used `dispatch`)\n    if (info === 'isThunk' && arg === undefined) return\n\n    // for good measure honor promises (`dispatch` will have manually been used)\n    if (info === 'isThunk' && arg && arg.then) return arg\n\n    // use built-in `notFound` action creator if `NOT_FOUND` type\n    if (isNotFound(type)) {\n      const state = arg\n      const act = notFound(state, type)\n      if (basename) act.basename = basename\n      return act\n    }\n\n    // handle error action creator\n    const t = (arg && arg.type) || type\n    if (key === 'error') return handleError(arg, t, basename)\n\n    // the default behavior of transforming an `arg` object into an action with its type\n    if (isAction(arg)) return { type, basename, ...arg }\n\n    // if no `payload`, `query`, etc, treat arg as a `params/payload` for convenience\n    const name = subtypes.includes(key) || !route.path ? 'payload' : 'params' // non-route-changing actions (eg: _COMPLETE) or pathless routes use `payload` key\n    return { type, [name]: arg || {}, basename }\n  }\n\n  // optionally allow custom action creators\n  if (ac) {\n    return (...args: Array<any>) => defaultCreator(ac(...args))\n  }\n\n  // primary use case: generate an action creator (will only trigger last lines of `defaultCreator`)\n  return defaultCreator\n}\n"],"file":"makeActionCreator.js"}