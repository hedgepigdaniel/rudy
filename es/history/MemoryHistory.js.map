{"version":3,"sources":["../../src/history/MemoryHistory.js"],"names":["History","restoreHistory","saveHistory","supportsSession","toEntries","MemoryHistory","opts","options","i","initialIndex","ents","initialEntries","n","initialN","useSession","testBrowser","restore","save"],"mappings":";;;;;;;;;;;;;;;;;;AACA,OAAOA,OAAP,MAAoB,WAApB;AACA,SAASC,cAAT,EAAyBC,WAAzB,EAAsCC,eAAtC,QAA6D,SAA7D;AACA,SAASC,SAAT,QAA0B,UAA1B,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;IAEqBC,a;;;;;;;;;;;;;+BACR;AAAA,UACQC,IADR,GACiB,IADjB,CACDC,OADC;AAAA,UAEaC,CAFb,GAEsDF,IAFtD,CAEDG,YAFC;AAAA,UAEgCC,IAFhC,GAEsDJ,IAFtD,CAEgBK,cAFhB;AAAA,UAEgDC,CAFhD,GAEsDN,IAFtD,CAEsCO,QAFtC;AAGT,UAAMC,UAAU,GAAGX,eAAe,MAAMG,IAAI,CAACS,WAAL,KAAqB,KAA7D;AAEAT,MAAAA,IAAI,CAACU,OAAL,GAAeV,IAAI,CAACU,OAAL,IAAiBF,UAAU,IAAIb,cAA9C;AACAK,MAAAA,IAAI,CAACW,IAAL,GAAYX,IAAI,CAACW,IAAL,IAAcH,UAAU,IAAIZ,WAAxC;AAEA,aAAOI,IAAI,CAACU,OAAL,GAAeV,IAAI,CAACU,OAAL,CAAa,IAAb,CAAf,GAAoCZ,SAAS,CAAC,IAAD,EAAOM,IAAP,EAAaF,CAAb,EAAgBI,CAAhB,CAApD,CARS,CAQ8D;AACxE;;;;EAVwCZ,O;;SAAtBK,a","sourcesContent":["// @flow\nimport History from './History'\nimport { restoreHistory, saveHistory, supportsSession } from './utils'\nimport { toEntries } from '../utils'\n\n// Even though this is used primarily in environments without `window` (server + React Native),\n// it's also used as a fallback in browsers lacking the `history` API (<=IE9). In that now rare case,\n// the URL won't change once you enter the site, however, if you forward or back out of the site\n// we restore entries from `sessionStorage`. So essentially the application behavior is identical\n// to browsers with `history` except the URL doesn't change.\n\n// `initialEntries` can be:\n// [path, path, etc] or: path\n// [action, action, etc] or: action\n// [[path, state, key?], [path, state, key?], etc] or: [path, state, key?]\n// or any combination of different kinds\n\nexport default class MemoryHistory extends History {\n  _restore() {\n    const { options: opts } = this\n    const { initialIndex: i, initialEntries: ents, initialN: n } = opts\n    const useSession = supportsSession() && opts.testBrowser !== false\n\n    opts.restore = opts.restore || (useSession && restoreHistory)\n    opts.save = opts.save || (useSession && saveHistory)\n\n    return opts.restore ? opts.restore(this) : toEntries(this, ents, i, n) // when used as a browser fallback, we restore from sessionStorage\n  }\n}\n"],"file":"MemoryHistory.js"}