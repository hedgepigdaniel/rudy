{"version":3,"sources":["../../src/utils/urlToAction.js"],"names":["resolvePathname","urlToLocation","locationToUrl","cleanBasename","matchUrl","notFound","api","url","state","key","createKey","getLocation","routes","opts","options","curr","resolveBasename","basename","slashBasename","location","createLocation","action","createAction","scene","type","pathname","search","bn","charAt","stripBasename","loc","st","types","Object","keys","filter","path","i","length","route","transformers","formatParams","formatQuery","formatHash","match","params","query","hash","formatState","parseSearch","fromPath","defaultFromPath","forEach","name","repeat","optional","prototype","hasOwnProperty","call","val","toString","undefined","def","defaultParams","fromSegment","convertNum","capitalize","TypeError","isNumber","Number","parseFloat","replace","ltr","toUpperCase","convertNumbers","capitalizedWords","Array","isArray","join","from","fromSearch","defaultQuery","fromHash","defaultHash","defaultState","str","isNaN","NOT_FOUND","_emptyBn","findBasename","basenames","indexOf","substr","bns","find","process","env","NODE_ENV","Math","random"],"mappings":"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","sourcesContent":["// @flow\nimport resolvePathname from 'resolve-pathname'\nimport { urlToLocation, locationToUrl, cleanBasename, matchUrl } from './index'\nimport { notFound } from '../actions'\nimport type {\n  Routes,\n  HistoryLocation,\n  NavigationAction,\n  Route,\n  Options,\n  FromPath,\n} from '../flow-types'\n\nexport default (\n  api: {\n    routes: Routes,\n    options: Options,\n    getLocation?: Function,\n  },\n  url: string,\n  state: Object = {},\n  key: string = createKey(),\n) => {\n  const { getLocation, routes, options: opts } = api\n  const curr = getLocation ? getLocation() : {}\n\n  const { basename, slashBasename } = resolveBasename(url, opts, state, curr)\n\n  const location = createLocation(url, opts, slashBasename, curr)\n  const action = createAction(location, routes, opts, state, curr)\n\n  return {\n    ...action, // { type, params, query, state, hash }\n    basename,\n    location: {\n      key,\n      scene: routes[action.type].scene || '',\n      url: slashBasename + locationToUrl(location),\n      pathname: location.pathname,\n      search: location.search,\n    },\n  }\n}\n\nconst createLocation = (url, opts, bn, curr) => {\n  if (!url) {\n    url = curr.pathname || '/'\n  } else if (curr.pathname && url.charAt(0) !== '/') {\n    url = resolvePathname(url, curr.pathname) // resolve pathname relative to current location\n  } else {\n    url = stripBasename(url, bn) // eg: /base/foo?a=b#bar -> /foo?a=b#bar\n  }\n\n  return urlToLocation(url) // gets us: { pathname, search, hash } properly formatted\n}\n\nconst createAction = (\n  loc: HistoryLocation,\n  routes: Routes,\n  opts: Options,\n  st: Object = {},\n  curr: Object = {},\n): NavigationAction => {\n  const types = Object.keys(routes).filter((type) => routes[type].path)\n\n  for (let i = 0; i < types.length; i++) {\n    const type = types[i]\n    const route = routes[type]\n    const transformers = { formatParams, formatQuery, formatHash }\n    const match = matchUrl(loc, route, transformers, route, opts)\n    if (match) {\n      const { params, query, hash } = match\n      const state = formatState(st, route, opts)\n      return { type, params, query, hash, state }\n    }\n  }\n\n  const { scene } = routes[curr.type] || {}\n\n  // TODO: Need some clairfication on scene stuff\n  // $FlowFixMe\n  const type = routes[`${scene}/NOT_FOUND`] && `${scene}/NOT_FOUND` // try to interpret scene-level NOT_FOUND if available (note: links create plain NOT_FOUND actions)\n\n  return {\n    ...notFound(st, type),\n    params: {}, // we can't know these in this case\n    query: loc.search ? parseSearch(loc.search, routes, opts) : {}, // keep this info\n    hash: loc.hash || '',\n  }\n}\n\n// EVERYTHING BELOW IS RELATED TO THE TRANSFORMERS PASSED TO `matchUrl`:\n\nconst formatParams = (params: Object, route: Route, keys, opts: Options) => {\n  const fromPath: FromPath = route.fromPath || opts.fromPath || defaultFromPath\n\n  keys.forEach(\n    ({\n      name,\n      repeat,\n      optional,\n    }: {\n      name: string | number,\n      repeat: Boolean,\n      optional: Boolean,\n    }) => {\n      if (!Object.prototype.hasOwnProperty.call(params, name)) {\n        return\n      }\n      const val = params[name]\n      // don't decode undefined values from optional params\n      params[name] = fromPath(\n        val,\n        { name: name.toString(), repeat, optional },\n        route,\n        opts,\n      )\n      if (params[name] === undefined) {\n        // allow optional params to be overriden by defaultParams\n        delete params[name]\n      }\n    },\n  )\n\n  const def = route.defaultParams || opts.defaultParams\n  return def\n    ? typeof def === 'function'\n      ? def(params, route, opts)\n      : { ...def, ...params }\n    : params\n}\n\nconst fromSegment = (val, convertNum, capitalize) => {\n  if (typeof val !== 'string') {\n    // defensive\n    throw TypeError('[rudy]: received invalid type from URL')\n  }\n  if (convertNum && isNumber(val)) {\n    return Number.parseFloat(val)\n  }\n\n  if (capitalize) {\n    // 'my-category' -> 'My Category'\n    return val.replace(/-/g, ' ').replace(/\\b\\w/g, (ltr) => ltr.toUpperCase())\n  }\n\n  return val\n}\n\nexport const defaultFromPath: FromPath = (\n  val,\n  { repeat, optional },\n  route,\n  opts,\n) => {\n  const convertNum =\n    route.convertNumbers ||\n    (opts.convertNumbers && route.convertNumbers !== false)\n\n  const capitalize =\n    route.capitalizedWords ||\n    (opts.capitalizedWords && route.capitalizedWords !== false)\n\n  if (repeat && (Array.isArray(val) || val === undefined)) {\n    return val && val.length ? val.join('/') : undefined\n  }\n  if (!repeat && optional && val === undefined) {\n    return undefined\n  }\n  if (typeof val === 'string') {\n    return fromSegment(val, convertNum, capitalize)\n  }\n  // defensive\n  throw TypeError(`[rudy]: Received invalid param from URL`)\n}\n\nconst formatQuery = (query: Object, route: Route, opts: Options) => {\n  // TODO: Is this fromPath ? its got the same props going into it?\n  // $FlowFixMe\n  const from = route.fromSearch || opts.fromSearch\n\n  if (from) {\n    Object.keys(query).forEach((key) => {\n      query[key] = from(query[key], key, route, opts)\n      if (query[key] === undefined) {\n        // allow undefined values to be overridden by defaultQuery\n        delete query[key]\n      }\n    })\n  }\n\n  const def = route.defaultQuery || opts.defaultQuery\n  return def\n    ? typeof def === 'function'\n      ? def(query, route, opts)\n      : { ...def, ...query }\n    : query\n}\n\nconst formatHash = (hash: string, route: Route, opts: Options) => {\n  // TODO: is this toHash?\n  // $FlowFixMe\n  const from = route.fromHash || opts.fromHash\n  // $FlowFixMe\n  hash = from ? from(hash, route, opts) : hash\n\n  const def = route.defaultHash || opts.defaultHash\n  return def\n    ? typeof def === 'function'\n      ? def(hash, route, opts)\n      : hash || def\n    : hash\n}\n\nconst formatState = (state: Object, route: Route, opts: Options) => {\n  const def = route.defaultState || opts.defaultState\n  return def\n    ? typeof def === 'function'\n      ? def(state, route, opts)\n      : { ...def, ...state }\n    : state\n} // state has no string counter part in the address bar, so there is no `fromState`\n\nconst isNumber = (str: string) => !Number.isNaN(Number.parseFloat(str))\n\nconst parseSearch = (search, routes, opts) =>\n  (routes.NOT_FOUND.parseSearch || opts.parseSearch)(search)\n\n// BASENAME HANDLING:\n\nconst resolveBasename = (url, opts, state, curr) => {\n  // TODO: Whats going on with this huge option type?\n  // $FlowFixMe\n  const bn = state._emptyBn\n    ? ''\n    : findBasename(url, opts.basenames) || curr.basename\n\n  const slashBasename = cleanBasename(bn)\n  const basename = slashBasename.replace(/^\\//, '') // eg: '/base' -> 'base'\n\n  delete state._emptyBn // not cool kyle\n\n  return { basename, slashBasename } // { 'base', '/base' }\n}\n\nexport const stripBasename = (path: string, bn: string) =>\n  path.indexOf(bn) === 0 ? path.substr(bn.length) : path\n\nexport const findBasename = (path: string, bns: Array<string> = []) =>\n  bns.find((bn) => path.indexOf(bn) === 0)\n\n// MISC\n\nconst createKey = () => {\n  if (process.env.NODE_ENV === 'test') {\n    return '123456789'.toString(36).substr(2, 6)\n  }\n  return Math.random()\n    .toString(36)\n    .substr(2, 6)\n}\n"],"file":"urlToAction.js"}