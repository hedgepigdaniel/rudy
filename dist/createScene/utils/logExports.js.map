{"version":3,"sources":["../../../src/createScene/utils/logExports.js"],"names":["types","actions","routes","options","opts","scene","Object","keys","logExports","optsString","JSON","stringify","replace","t","type","a","action","exports","slice","process","env","NODE_ENV","console","log"],"mappings":";;;;;;;AACA;;;;;;;;eAEe,kBAACA,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAAyBC,OAAzB,EAAqC;AAClD,MAAMC,IAAI,qBAAQD,OAAR,CAAV;;AACAC,EAAAA,IAAI,CAACC,KAAL,GAAa,wBAAYC,MAAM,CAACC,IAAP,CAAYL,MAAZ,EAAoB,CAApB,CAAZ,CAAb;AACA,SAAOE,IAAI,CAACI,UAAZ;AAEA,MAAMC,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAeP,IAAf,EAChBQ,OADgB,CACR,UADQ,EACI,SADJ,EAEhBA,OAFgB,CAER,aAFQ,EAEO,YAFP,EAGhBA,OAHgB,CAGR,IAHQ,EAGF,GAHE,EAIhBA,OAJgB,CAIR,GAJQ,EAIH,IAJG,EAKhBA,OALgB,CAKR,GALQ,EAKH,IALG,EAMhBA,OANgB,CAMR,IANQ,EAMF,IANE,CAAnB;AAQA,MAAIC,CAAC,GAAG,EAAR;;AACA,OAAK,IAAMC,IAAX,IAAmBd,KAAnB;AAA0Ba,IAAAA,CAAC,kBAAWC,IAAX,MAAD;AAA1B;;AAEA,MAAIC,CAAC,GAAG,EAAR;;AACA,OAAK,IAAMC,MAAX,IAAqBf,OAArB;AAA8Bc,IAAAA,CAAC,kBAAWC,MAAX,MAAD;AAA9B,GAjBkD,CAmBlD;;;AACA,MAAIC,OAAO,4DAAqDR,UAArD,MAAX;AACAQ,EAAAA,OAAO,0BAAmBJ,CAAC,CAACK,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAZ,CAAnB,gBAAP;AACAD,EAAAA,OAAO,0BAAmBF,CAAC,CAACG,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAZ,CAAnB,kBAAP,CAtBkD,CAwBlD;;AACAD,EAAAA,OAAO,0BAAmBJ,CAAnB,CAAP;AACAI,EAAAA,OAAO,aAAMA,OAAO,CAACC,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAlB,CAAN,QAAP,CA1BkD,CA4BlD;;AACAD,EAAAA,OAAO,0BAAmBF,CAAnB,CAAP;AACAE,EAAAA,OAAO,aAAMA,OAAO,CAACC,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAlB,CAAN,QAAP;AAEA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqCC,OAAO,CAACC,GAAR,CAAYN,OAAZ;AACrC,SAAOA,OAAP;AACD,C","sourcesContent":["// @flow\nimport { typeToScene } from '../../utils'\n\nexport default (types, actions, routes, options) => {\n  const opts = { ...options }\n  opts.scene = typeToScene(Object.keys(routes)[0])\n  delete opts.logExports\n\n  const optsString = JSON.stringify(opts)\n    .replace(/\"scene\":/, 'scene: ')\n    .replace(/\"basename\":/, 'basename: ')\n    .replace(/\"/g, \"'\")\n    .replace('{', '{ ')\n    .replace('}', ' }')\n    .replace(/,/g, ', ')\n\n  let t = ''\n  for (const type in types) t += `\\n\\t${type},`\n\n  let a = ''\n  for (const action in actions) a += `\\n\\t${action},`\n\n  // destructure createActions()\n  let exports = `const { types, actions } = createScene(routes, ${optsString})`\n  exports += `\\n\\nconst { ${t.slice(0, -1)}\\n} = types`\n  exports += `\\n\\nconst { ${a.slice(0, -1)}\\n} = actions`\n\n  // types exports\n  exports += `\\n\\nexport {${t}`\n  exports = `${exports.slice(0, -1)}\\n}`\n\n  // actions exports\n  exports += `\\n\\nexport {${a}`\n  exports = `${exports.slice(0, -1)}\\n}`\n\n  if (process.env.NODE_ENV !== 'test') console.log(exports)\n  return exports\n}\n"],"file":"logExports.js"}