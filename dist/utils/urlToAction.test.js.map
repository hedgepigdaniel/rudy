{"version":3,"sources":["../../src/utils/urlToAction.test.js"],"names":["describe","NOT_FOUND","ROOT","STATIC","UNNAMED_PARAM","SINGLE_PARAM","OPTIONAL_PARAM","MULTIPLE_PARAMS","OPTIONAL_PATH_PARAM","COMPULSORY_PATH_PARAM","MULTI_MULTI_PARAM","routes","path","api","options","assertActionForUrl","url","action","expect","toEqual","basename","hash","location","key","pathname","scene","search","query","state","params","it","type","param","p1","p2","p","checkFromPath","value","result","repeat","optional","convertNumbers","capitalizedWords","label","undefined","Array","isArray","repeatValues","filter","val","optionalValues","convertNumbersValues","capitalizeWordsValues","forEach","r","o","w","n","name"],"mappings":"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","sourcesContent":["// @flow\nimport urlToAction, { defaultFromPath } from './urlToAction'\n\ndescribe('Parses params', () => {\n  const NOT_FOUND = 'NOT_FOUND'\n  const ROOT = 'ROOT'\n  const STATIC = 'STATIC'\n  const UNNAMED_PARAM = 'UNNAMED_PARAM'\n  const SINGLE_PARAM = 'SINGLE_PARAM'\n  const OPTIONAL_PARAM = 'OPTIONAL_PARAM'\n  const MULTIPLE_PARAMS = 'MULTIPLE_PARAMS'\n  const OPTIONAL_PATH_PARAM = 'OPTIONAL_PATH_PARAM'\n  const COMPULSORY_PATH_PARAM = 'COMPULSORY_PATH_PARAM'\n  const MULTI_MULTI_PARAM = 'MULTI_MULTI_PARAM'\n  const routes = {\n    [NOT_FOUND]: {\n      path: '/404',\n    },\n    [ROOT]: {\n      path: '/',\n    },\n    [STATIC]: {\n      path: '/static',\n    },\n    [UNNAMED_PARAM]: {\n      path: '/unnamed(.*)',\n    },\n    [SINGLE_PARAM]: {\n      path: '/compulsory/:param',\n    },\n    [OPTIONAL_PARAM]: {\n      path: '/optional/:param?',\n    },\n    [MULTIPLE_PARAMS]: {\n      path: '/multiple/:p1/:p2',\n    },\n    [OPTIONAL_PATH_PARAM]: {\n      path: '/multistar/:p*',\n    },\n    [COMPULSORY_PATH_PARAM]: {\n      path: '/multiplus/:p+',\n    },\n    [MULTI_MULTI_PARAM]: {\n      path: '/multimulti/:p1*/separator/:p2+',\n    },\n  }\n  const api = {\n    routes,\n    options: {},\n  }\n\n  const assertActionForUrl = (url, action) =>\n    expect(urlToAction(api, url, {})).toEqual({\n      basename: '',\n      hash: '',\n      location: {\n        key: '345678',\n        pathname: url,\n        scene: '',\n        search: '',\n        url,\n      },\n      query: {},\n      state: {},\n      params: {},\n      ...action,\n    })\n\n  it('Static path', () => {\n    assertActionForUrl('/', { type: ROOT })\n\n    assertActionForUrl('/static', { type: STATIC })\n  })\n\n  it('Single unnamed parameter', () => {\n    assertActionForUrl('/unnamed', {\n      type: UNNAMED_PARAM,\n      params: { '0': '' },\n    })\n\n    assertActionForUrl('/unnamedapple', {\n      type: UNNAMED_PARAM,\n      params: { '0': 'apple' },\n    })\n  })\n\n  it('Single compulsory parameter', () => {\n    assertActionForUrl('/compulsory', { type: NOT_FOUND })\n\n    assertActionForUrl('/compulsory/apple', {\n      type: SINGLE_PARAM,\n      params: { param: 'apple' },\n    })\n  })\n\n  it('Single optional parameter', () => {\n    assertActionForUrl('/optional', { type: OPTIONAL_PARAM })\n\n    assertActionForUrl('/optional/test', {\n      type: OPTIONAL_PARAM,\n      params: { param: 'test' },\n    })\n  })\n\n  it('Multiple parameters', () => {\n    assertActionForUrl('/multiple/1/2', {\n      type: MULTIPLE_PARAMS,\n      params: { p1: '1', p2: '2' },\n    })\n  })\n\n  it('Multi segment optional parameter', () => {\n    assertActionForUrl('/multistar', { type: OPTIONAL_PATH_PARAM })\n\n    assertActionForUrl('/multistar/single', {\n      type: OPTIONAL_PATH_PARAM,\n      params: { p: 'single' },\n    })\n\n    assertActionForUrl('/multistar/one/two/three', {\n      type: OPTIONAL_PATH_PARAM,\n      params: { p: 'one/two/three' },\n    })\n  })\n\n  it('Multi segment compulsory parameter', () => {\n    assertActionForUrl('/multiplus', { type: NOT_FOUND })\n\n    assertActionForUrl('/multiplus/one', {\n      type: COMPULSORY_PATH_PARAM,\n      params: { p: 'one' },\n    })\n\n    assertActionForUrl('/multiplus/one/two', {\n      type: COMPULSORY_PATH_PARAM,\n      params: { p: 'one/two' },\n    })\n  })\n\n  it('Multiple multi segment params', () => {\n    assertActionForUrl('/multimulti/separator/one', {\n      type: MULTI_MULTI_PARAM,\n      params: { p2: 'one' },\n    })\n\n    assertActionForUrl('/multimulti/separator/one/two', {\n      type: MULTI_MULTI_PARAM,\n      params: { p2: 'one/two' },\n    })\n\n    assertActionForUrl('/multimulti/one/two/separator/three/four', {\n      type: MULTI_MULTI_PARAM,\n      params: { p1: 'one/two', p2: 'three/four' },\n    })\n  })\n})\n\ndescribe('defaultFromPath', () => {\n  const checkFromPath = (\n    value,\n    result,\n    {\n      repeat,\n      optional,\n      convertNumbers,\n      capitalizedWords,\n    }: {\n      repeat?: boolean,\n      optional?: boolean,\n      convertNumbers?: boolean,\n      capitalizedWords?: boolean,\n    } = {},\n  ) => {\n    let label\n    if (value === undefined) {\n      label = 'undefined'\n    } else if (Array.isArray(value)) {\n      label = '[Array]'\n    } else if (typeof value === 'string') {\n      label = `'${value}'`\n    }\n\n    const repeatValues = [true, false].filter((val) => !val !== repeat)\n    const optionalValues = [true, false].filter((val) => !val !== optional)\n    const convertNumbersValues = [true, false].filter(\n      (val) => !val !== convertNumbers,\n    )\n    const capitalizeWordsValues = [true, false].filter(\n      (val) => !val !== capitalizedWords,\n    )\n\n    repeatValues.forEach((r) => {\n      optionalValues.forEach((o) => {\n        capitalizeWordsValues.forEach((w) => {\n          convertNumbersValues.forEach((n) =>\n            it(`defaultFromPath(${label}, { name: 'test', repeat: ${\n              repeat ? 'true' : 'false'\n            }, optional: ${optional ? 'true' : 'false'}}, { convertNumbers: ${\n              n ? 'true' : 'false'\n            }, capitalizedWords: ${w ? 'true' : 'false'} })`, () =>\n              expect(\n                defaultFromPath(\n                  value,\n                  { name: 'test', optional: o, repeat: r },\n                  { convertNumbers: n, capitalizedWords: w },\n                  {},\n                ),\n              ).toEqual(result)),\n          )\n        })\n      })\n    })\n  }\n\n  // absent optional  params\n  checkFromPath(undefined, undefined, { optional: true, repeat: false })\n  checkFromPath([], undefined, { repeat: true, optional: true })\n\n  // strings\n  checkFromPath('one%20two-three', 'one%20two-three', {\n    repeat: false,\n    capitalizedWords: false,\n  })\n  checkFromPath('42', '42', {\n    repeat: false,\n    convertNumbers: false,\n  })\n\n  // convertNumbers\n  checkFromPath('42', 42, {\n    repeat: false,\n    convertNumbers: true,\n  })\n  checkFromPath('3.141', 3.141, {\n    repeat: false,\n    convertNumbers: true,\n  })\n\n  // capitalizedWords\n  checkFromPath('one-two-three', 'One Two Three', {\n    repeat: false,\n    capitalizedWords: true,\n  })\n  checkFromPath('one', 'One', {\n    repeat: false,\n    capitalizedWords: true,\n  })\n\n  // multiple segments\n  checkFromPath(['segment1'], 'segment1', { repeat: true })\n  checkFromPath(\n    ['segment1', 'segment%202', 'segment-three', '42'],\n    'segment1/segment%202/segment-three/42',\n    { repeat: true },\n  )\n})\n"],"file":"urlToAction.test.js"}