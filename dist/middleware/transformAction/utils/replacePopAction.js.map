{"version":3,"sources":["../../../../src/middleware/transformAction/utils/replacePopAction.js"],"names":["n","url","curr","tmp","from","location","entries","index","isNAdjacentToSameUrl","prevUrl","revertPop","newIndex","loc","findNeighboringN","prev","next"],"mappings":";;;;;;;AAAA;AACA;eAEe,kBAACA,CAAD,EAAIC,GAAJ,EAASC,IAAT,EAAeC,GAAf,EAAuB;AAAA,2BACTA,GAAG,CAACC,IAAJ,CAASC,QADA;AAAA,MAC5BC,OAD4B,sBAC5BA,OAD4B;AAAA,MACnBC,KADmB,sBACnBA,KADmB;;AAGpC,MAAI,CAACC,oBAAoB,CAACP,GAAD,EAAMC,IAAN,EAAYF,CAAZ,CAAzB,EAAyC;AAAA,QAC1BS,QAD0B,GACdN,GAAG,CAACC,IAAJ,CAASC,QADK,CAC/BJ,GAD+B;AAEvCD,IAAAA,CAAC,GAAGG,GAAG,CAACO,SAAJ,GAAgB,IAAhB,GAAuBV,CAA3B,CAFuC,CAEV;;AAC7B,WAAO;AAAEA,MAAAA,CAAC,EAADA,CAAF;AAAKM,MAAAA,OAAO,EAAPA,OAAL;AAAcC,MAAAA,KAAK,EAALA,KAAd;AAAqBE,MAAAA,OAAO,EAAPA;AAArB,KAAP;AACD;;AAED,MAAME,QAAQ,GAAGJ,KAAK,GAAGP,CAAzB;AAToC,MAUvBS,OAVuB,GAUXH,OAAO,CAACK,QAAD,CAAP,CAAkBN,QAVP,CAU5BJ,GAV4B;AAWpCD,EAAAA,CAAC,GAAGG,GAAG,CAACO,SAAJ,GAAgBV,CAAhB,GAAoBA,CAAC,GAAG,CAA5B;AACA,SAAO;AAAEA,IAAAA,CAAC,EAADA,CAAF;AAAKM,IAAAA,OAAO,EAAPA,OAAL;AAAcC,IAAAA,KAAK,EAAEI,QAArB;AAA+BF,IAAAA,OAAO,EAAPA;AAA/B,GAAP;AACD,C;;;;AAED,IAAMD,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACP,GAAD,EAAMC,IAAN,EAAYF,CAAZ,EAAkB;AAAA,MACrCM,OADqC,GAClBJ,IADkB,CACrCI,OADqC;AAAA,MAC5BC,KAD4B,GAClBL,IADkB,CAC5BK,KAD4B;AAE7C,MAAMK,GAAG,GAAGN,OAAO,CAACC,KAAK,GAAGP,CAAC,GAAG,CAAb,CAAnB;AACA,SAAOY,GAAG,IAAIA,GAAG,CAACP,QAAJ,CAAaJ,GAAb,KAAqBA,GAAnC;AACD,CAJD;;AAMO,IAAMY,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACT,IAAD,EAAOF,IAAP,EAAgB;AAAA,MACtCI,OADsC,GACnBJ,IADmB,CACtCI,OADsC;AAAA,MAC7BC,KAD6B,GACnBL,IADmB,CAC7BK,KAD6B;AAG9C,MAAMO,IAAI,GAAGR,OAAO,CAACC,KAAK,GAAG,CAAT,CAApB;AACA,MAAIO,IAAI,IAAIA,IAAI,CAACT,QAAL,CAAcJ,GAAd,KAAsBG,IAAI,CAACC,QAAL,CAAcJ,GAAhD,EAAqD,OAAO,CAAC,CAAR;AAErD,MAAMc,IAAI,GAAGT,OAAO,CAACC,KAAK,GAAG,CAAT,CAApB;AACA,MAAIQ,IAAI,IAAIA,IAAI,CAACV,QAAL,CAAcJ,GAAd,KAAsBG,IAAI,CAACC,QAAL,CAAcJ,GAAhD,EAAqD,OAAO,CAAP;AACtD,CARM","sourcesContent":["// handle redirects from back/next actions, where we want to replace in place\n// instead of pushing a new entry to preserve proper movement along history track\n\nexport default (n, url, curr, tmp) => {\n  const { entries, index } = tmp.from.location\n\n  if (!isNAdjacentToSameUrl(url, curr, n)) {\n    const { url: prevUrl } = tmp.from.location\n    n = tmp.revertPop ? null : n // if this back/next movement is due to a user-triggered pop (browser back/next buttons), we don't need to shift the browser history by n, since it's already been done\n    return { n, entries, index, prevUrl }\n  }\n\n  const newIndex = index + n\n  const { url: prevUrl } = entries[newIndex].location\n  n = tmp.revertPop ? n : n * 2\n  return { n, entries, index: newIndex, prevUrl }\n}\n\nconst isNAdjacentToSameUrl = (url, curr, n) => {\n  const { entries, index } = curr\n  const loc = entries[index + n * 2]\n  return loc && loc.location.url === url\n}\n\nexport const findNeighboringN = (from, curr) => {\n  const { entries, index } = curr\n\n  const prev = entries[index - 1]\n  if (prev && prev.location.url === from.location.url) return -1\n\n  const next = entries[index + 1]\n  if (next && next.location.url === from.location.url) return 1\n}\n"],"file":"replacePopAction.js"}