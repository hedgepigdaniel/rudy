{"version":3,"sources":["../../../src/createScene/utils/formatRoute.js"],"names":["isNotFound","typeToScene","formatRoute","r","type","routes","formatter","route","scene","path","toLowerCase"],"mappings":"AACA,SAASA,UAAT,EAAqBC,WAArB,EAAkCC,WAAlC,QAAqD,aAArD;AAGA,gBAAe,UACbC,CADa,EAEbC,IAFa,EAGbC,MAHa,EAIbC,SAJa,EAKV;AACH,MAAMC,KAAK,GAAGL,WAAW,CAACC,CAAD,EAAIC,IAAJ,EAAUC,MAAV,EAAkBC,SAAlB,CAAzB;AAEAC,EAAAA,KAAK,CAACC,KAAN,GAAcP,WAAW,CAACG,IAAD,CAAzB,CAHG,CAIH;;AACA,MAAI,CAACG,KAAK,CAACE,IAAP,IAAeT,UAAU,CAACI,IAAD,CAA7B,EAAqC;AACnCG,IAAAA,KAAK,CAACE,IAAN,GAAaF,KAAK,CAACC,KAAN,GACT;AADS,eAELL,CAAC,CAACK,KAAF,CAAQE,WAAR,EAFK,kBAGT,YAHJ;AAID;;AAED,SAAOH,KAAP;AACD,CAlBD","sourcesContent":["// @flow\nimport { isNotFound, typeToScene, formatRoute } from '../../utils'\nimport type { RouteInput, Routes } from '../../flow-types'\n\nexport default (\n  r: RouteInput,\n  type: string,\n  routes: Routes,\n  formatter: ?Function,\n) => {\n  const route = formatRoute(r, type, routes, formatter)\n\n  route.scene = typeToScene(type)\n  // set default path for NOT_FOUND actions if necessary\n  if (!route.path && isNotFound(type)) {\n    route.path = route.scene\n      ? // $FlowFixMe\n        `/${r.scene.toLowerCase()}/not-found`\n      : '/not-found'\n  }\n\n  return route\n}\n"],"file":"formatRoute.js"}