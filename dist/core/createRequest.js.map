{"version":3,"sources":["../../src/core/createRequest.js"],"names":["action","api","next","Request","ctx","pending","tmp","committed","history","pendingPop","Promise","resolve","commitDispatch","then","res","commitHistory","dispatch","realDispatch","type","route","routes","linkPipelines","busy","from","path","location","kind","status","_start","populateAction","payload","oldUrl","getLocation","url","urlChanged","serverRedirect","CALL_HISTORY","redirect","_dispatched","canLeave","confirm","UNBLOCK","last","name","prev","prevRoute","callback","ref","BLOCK","load","universal","test","getKind","doubleDispatchRedirect","revertPop","attemptedAction","canceled","SET_FROM","undefined","act","isActionType","str","scene","indexOf","options","isNewPipeline","pendingRequest","isRouteAction","Object","assign","extra","error","commit"],"mappings":"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","sourcesContent":["// @flow\nimport { BLOCK, UNBLOCK, SET_FROM, CALL_HISTORY } from '../types'\nimport { redirect } from '../actions'\nimport { isAction, createActionRef } from '../utils'\nimport type {\n  ActionMetaLocation,\n  Action,\n  RequestAPI,\n  Route,\n  Routes,\n  Dispatch,\n} from '../flow-types'\n\nexport default (action: Action, api: RequestAPI, next: Function): Request =>\n  new Request(action, api, next)\n\nexport class Request {\n  tmp: Object\n\n  action: Action\n\n  ctx: Object\n\n  route: Route\n\n  prevRoute: Route\n\n  error: null | boolean\n\n  scene: string\n\n  realDispatch: Dispatch\n\n  commitDispatch: Dispatch | Function\n\n  commitHistory: void | Function\n\n  history: Object\n\n  routes: Routes\n\n  redirect: ActionMetaLocation\n\n  getLocation: () => Object\n\n  last: Object\n\n  canceled: boolean\n\n  type: string\n\n  constructor(action: Action, api: RequestAPI, next: Function): void {\n    const { routes, options, getLocation, ctx } = api\n    const isNewPipeline = !action.tmp\n    const pendingRequest = ctx.pending\n    const { kind, type, prev } = getLocation()\n    const route = routes[action.type] || {}\n    const isRouteAction = !!route.path\n    const prevRoute = kind === 'init' ? routes[prev.type] || {} : routes[type]\n\n    // the `tmp` context is passed along by all route-changing actions in the same primary parent\n    // pipeline to keep track of things like `committed` status, but we don't want the\n    // resulting action that leaves Rudy to have this, so we delete it.\n    const tmp = (this.tmp = action.tmp || {})\n    delete action.tmp // delete it so it's never seen outside of pipeline\n\n    tmp.load = tmp.load || (action.location && action.location.kind === 'load')\n    ctx.busy = ctx.busy || isRouteAction // maintain `busy` status throughout a primary parent route changing pipeline even if there are pathlessRoutes, anonymousThunks (which don't have paths) called by them\n\n    // cancel pending not committed requests if new ones quickly come in\n    if (isRouteAction) {\n      if (pendingRequest && isNewPipeline) {\n        pendingRequest.tmp.canceled = true // `compose` will return early on pending requests, effectively cancelling them\n        pendingRequest.tmp.revertPop && pendingRequest.tmp.revertPop() // cancel any actions triggered by browser pops\n      }\n\n      ctx.pending = this\n    }\n\n    Object.assign(this, options.extra)\n    Object.assign(this, action) // destructure action into request for convenience in callbacks\n    Object.assign(this, api, { dispatch: this.dispatch })\n\n    this.action = action\n    this.ctx = ctx\n    this.route = route\n    this.prevRoute = prevRoute\n    this.error = null\n    this.scene = route.scene || ''\n\n    this.realDispatch = api.dispatch\n    this.commitDispatch = next // standard redux next dispatch from our redux middleware\n    this.commitHistory = action.commit // commitHistory is supplied by history-generated actions. Otherwise it will be added soon by the `transformAction` middleware\n\n    // available when browser back/next buttons used. It's used in 3 cases:\n    // 1) when you return `false` from a route triggered by the browser back/next buttons (See `core/compose.js`)\n    // 2) in `transformAction/index.js` when popping to a route that redirects to the current URL (yes, we're on top of edge cases!)\n    // 3) when a pop-triggered action is canceled (see above)\n    this.tmp.revertPop = this.tmp.revertPop || action.revertPop\n  }\n\n  enter = (): Promise<any> => {\n    this.ctx.pending = false\n    this.tmp.committed = true\n    this.history.pendingPop = null\n\n    return Promise.resolve(this.commitDispatch(this.action)) // syncronous 99% percent of the time (state needs to be updated before history updates URL etc)\n      .then((res) => {\n        if (!this.commitHistory) return res\n        return this.commitHistory(this.action).then(() => res)\n      })\n  }\n\n  dispatch = (action: Object): Promise<any> => {\n    const dispatch = this.realDispatch\n    const type = action && action.type // actions as payloads (which can be `null`) allowed\n    const route = this.routes[type]\n    const linkPipelines = route || typeof action === 'function'\n\n    if (linkPipelines) {\n      action.tmp = this.tmp // keep the same `tmp` object across all redirects (or potential redirects in anonymous thunks)\n\n      if (this.ctx.busy) {\n        // keep track of previous action to properly replace instead of push during back/next redirects\n        // while setting to `state.from`. See `middleware/transformAction/utils/formatAction.js`\n        action.tmp.from = this.tmp.from || this.action\n      }\n    }\n\n    if (\n      this.ctx.busy &&\n      route &&\n      route.path && // convert actions to redirects only if \"busy\" in a route changing pipeline\n      !(action.location && action.location.kind === 'set') // history `set` actions should not be transformed to redirects\n    ) {\n      const status = action.location && action.location.status\n      action = redirect(action, status || 302)\n    }\n\n    if (typeof action !== 'function') {\n      if (!this._start) {\n        action = this.populateAction(action, this) // automatically turn payload-only actions into real actions with routeType_COMPLETE|_DONE as type\n      } else if (this._start) {\n        // a callback immediately before `enter` has the final action/payload dispatched attached\n        // to the payload of the main route action, to limit the # of actions dispatched.\n        // NOTE: requires this middleware: `[call('beforeThunk', { start: true }), enter]`\n        this.action.payload = action\n        return Promise.resolve(action)\n      }\n    }\n\n    const oldUrl = this.getLocation().url\n\n    return Promise.resolve(dispatch(action)) // dispatch transformed action\n      .then((res) => {\n        const urlChanged = oldUrl !== this.getLocation().url\n\n        if (\n          this.ctx.serverRedirect || // short-circuit when a server redirected is detected\n          ((urlChanged || action.type === CALL_HISTORY) && // short-circuit if the URL changed || or history action creators used\n            !(res && res.location && res.location.kind === 'set')) // but `set` should not short-circuit ever\n        ) {\n          this.redirect = res // assign action to `this.redirect` so `compose` can properly short-circuit route redirected from and resolve to the new action (NOTE: will capture nested pathlessRoutes + anonymousThunks)\n        }\n\n        if (res) res._dispatched = true // tell `middleware/call/index.js` to NOT automatically dispatch callback returns\n\n        return res\n      })\n  }\n\n  confirm = (canLeave: boolean = true): Dispatch => {\n    delete this.ctx.confirm\n\n    if (!canLeave) {\n      return this.realDispatch({ type: UNBLOCK })\n    }\n\n    // When `false` is returned from a `call` middleware, you can use `req.confirm()` or the corresponding action\n    // creator to run the action successfully through the pipeline again, as in a confirmation modal.\n    // All we do is temporarily delete the blocking callback and replace it after the action\n    // is successfully dispatched.\n    //\n    // See `middleware/call/index.js` for where the below assignments are made.\n    const { name, prev } = this.last\n    const route = prev ? this.prevRoute : this.route\n    const callback = route[name]\n\n    delete route[name]\n\n    return this.realDispatch(this.action).then((res) => {\n      route[name] = callback // put callback back\n      if (res) res._dispatched = true\n      return res\n    })\n  }\n\n  block = (): Dispatch => {\n    this.ctx.confirm = this.confirm\n    const ref = createActionRef(this.action)\n    return this.realDispatch({ type: BLOCK, payload: { ref } })\n  }\n\n  getKind = () => {\n    if (this.tmp.load) return 'load'\n    return this.action.location && this.action.location.kind\n  }\n\n  isUniversal = () => this.getLocation().universal\n\n  isDoubleDispatch = (): boolean =>\n    this.action.location.url === this.getLocation().url &&\n    !/load|reset|jump/.test(this.getKind()) // on `load`, the `firstRoute` action will trigger the same URL as stored in state; the others must always pass through\n\n  handleDoubleDispatch = () => {\n    this.ctx.pending = false\n    this.history.pendingPop = null\n\n    if (!this.tmp.from) return this.action // primary use case\n\n    // below is code related to occuring during a redirect (i.e. because `this.tmp.from` exists)\n    this.ctx.doubleDispatchRedirect = this.action // if it happens to be within a route-changing pipline that redirects, insure the parent pipeline short-circuits while setting `state.from` (see below + `call/index.js`)\n    if (this.tmp.revertPop) this.tmp.revertPop()\n\n    return this.action\n  }\n\n  handleDoubleDispatchRedirect = (res: Object) => {\n    const attemptedAction = this.ctx.doubleDispatchRedirect\n    delete this.ctx.doubleDispatchRedirect\n    this.canceled = true\n\n    const ref =\n      this.action.type === CALL_HISTORY\n        ? createActionRef(attemptedAction.location.from) // when history action creators are used in pipeline, we have to address this from the perspective of the `callHistory` middleware\n        : createActionRef(this.action)\n\n    this.realDispatch({ type: SET_FROM, payload: { ref } })\n\n    return res !== undefined ? res : attemptedAction\n  }\n\n  populateAction = (act: Action) => {\n    let type\n\n    const action = isAction(act)\n      ? act\n      : typeof act === 'string' && (type = this.isActionType(act))\n      ? { type }\n      : { payload: act }\n\n    action.type =\n      action.type ||\n      (this.tmp.committed ? `${this.type}_COMPLETE` : `${this.type}_DONE`)\n\n    return action\n  }\n\n  isActionType = (str: string) => {\n    if (this.routes[str]) return str\n    if (this.routes[`${this.scene}/${str}`]) return str\n    if (/^[A-Z0-9_/]+$/.test(str)) return str\n    if (str.indexOf('@@') === 0) return str\n  }\n}\n"],"file":"createRequest.js"}