{"version":3,"sources":["../../src/utils/logError.js"],"names":["logError","type","error","process","env","NODE_ENV","console","logCleanTestError","args","shorten","isLog","Error","stack","split","indexOf","shift","i","findIndex","line","slice","index","__dirname","dir","substr","reg","RegExp","trace","join","replace","message","action","log","length","onError","errorType","dispatch","global","logFull","arg"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-disable no-console */\nimport type { Dispatch } from '../flow-types'\n\nconst logError: (type: string, error: any) => void = (\n  type: string,\n  error: any,\n): void => {\n  if (process.env.NODE_ENV === 'development') {\n    console.error('[rudy]', `action.type: ${type}`, error)\n  } else if (process.env.NODE_ENV === 'test') {\n    logCleanTestError([type], error)\n  }\n}\n\nexport default logError\n\nconst logCleanTestError = (\n  args: Array<any>,\n  error?: Object,\n  shorten = true,\n) => {\n  const isLog = !error\n  error = error || new Error()\n\n  let stack: Array<string> = error.stack.split('\\n')\n\n  if (stack[1].indexOf('src/utils/logError.js') > -1) {\n    stack.shift()\n    stack.shift()\n    if (shorten) stack.shift()\n  }\n\n  if (shorten) {\n    const i = stack.findIndex((line) => line.indexOf('compose.js') > -1)\n    stack = stack.slice(0, i)\n  }\n\n  let index = __dirname.indexOf('/src/')\n\n  if (index === -1) {\n    index = __dirname.indexOf('__tests__')\n  }\n\n  if (index === -1) {\n    index = __dirname.indexOf('__helpers__')\n  }\n\n  if (index === -1) {\n    index = __dirname.indexOf('__tests-helpers__')\n  }\n\n  const dir = __dirname.substr(0, index)\n  const reg = new RegExp(dir, 'g')\n  const trace = `\\n${stack.join('\\n').replace(reg, '')}`\n\n  const message = isLog ? '' : 'RUDY ERROR:\\n'\n\n  if (args[0] && args[0].action) {\n    console.log(message, args[0].action, trace)\n  } else if (args.length === 1) {\n    console.log(message, args[0], trace)\n  } else if (args.length === 2) {\n    console.log(message, args[0], args[1], trace)\n  } else {\n    console.log(message, args, trace)\n  }\n}\n\nexport const onError = ({\n  errorType: type,\n  error,\n  dispatch,\n}: Object): Dispatch => {\n  logError(type, error)\n  return dispatch({ type, error })\n}\n\nif (process.env.NODE_ENV === 'test') {\n  global.log = (...args) => logCleanTestError(args)\n  global.logFull = (arg) => logCleanTestError([arg], new Error(), false)\n}\n"],"file":"logError.js"}