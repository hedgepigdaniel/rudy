{"version":3,"sources":["../../../src/history/utils/sessionStorage.js"],"names":["toEntries","supportsSessionStorage","saveHistory","entries","map","e","location","url","state","key","set","restoreHistory","api","history","get","initializeHistory","index","getHistoryState","format","clear","window","sessionStorage","setItem","stack","replaceState","historySet","id","val","json","JSON","stringify","getItem","parse","pushState","sessionId","go","n","getCurrentIndex","_id","PREFIX","createSessionId","process","env","NODE_ENV","toString","substr","Math","random","pathname","search","hash"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-env browser */\nimport { toEntries } from '../../utils'\nimport { supportsSessionStorage } from '@respond-framework/utils'\n\n// API:\n\n// Below is the facade around both `sessionStorage` and our \"history as storage\" fallback.\n//\n// - `saveHistory` is  called every time the history entries or index changes\n// - `restoreHistory` is called on startup obviously\n\n/**\n * If there is no `sessionStorage` (which happens e.g. in incognito mode in\n * iOS safari), we have a fallback which is to store the history of stack\n * entries inside the current browser history stack entry. Since we can only\n * access the current history stack entry, this means that if the user\n * returns to the middle of a set of entries within the app, then Rudy will\n * not be aware of the future entries. Navigation will still work, but the\n * entries in the redux state will not include future states, and callbacks\n * related to future states will therefore not work.\n */\n\nexport const saveHistory = ({ entries }) => {\n  entries = entries.map((e) => [e.location.url, e.state, e.location.key]) // one entry has the url, a state object, and a 6 digit key\n  set({ entries })\n}\n\nexport const restoreHistory = (api) => {\n  let history = get()\n  if (!history) {\n    history = initializeHistory()\n  } else {\n    history.index = getHistoryState().index\n  }\n  return format(history, api)\n}\n\nexport const clear = () => {\n  if (supportsSessionStorage()) {\n    window.sessionStorage.setItem(key(), '')\n  } else {\n    const state = window.history.state\n    if (state) {\n      delete state.stack\n      window.history.replaceState(state, null)\n    }\n  }\n  historySet({ index: 0, id: key() })\n}\n\nconst set = (val) => {\n  const json = JSON.stringify(val)\n  if (supportsSessionStorage()) {\n    window.sessionStorage.setItem(key(), json)\n  } else {\n    const state = window.history.state || {}\n    state.stack = json\n    window.history.replaceState(state, null)\n  }\n}\n\nexport const get = () => {\n  let json\n  if (supportsSessionStorage()) {\n    json = window.sessionStorage.getItem(key())\n  } else {\n    json = (window.history.state || {}).stack\n  }\n  try {\n    return JSON.parse(json)\n  } catch {\n    return null\n  }\n}\n\n// HISTORY FACADE:\n\nexport const pushState = (url: string) =>\n  window.history.pushState(\n    { id: sessionId(), index: getHistoryState().index + 1 },\n    null,\n    url,\n  ) // insure every entry has the sessionId (called by `BrowserHistory`)\n\nexport const replaceState = (url: string) =>\n  window.history.replaceState(\n    { id: sessionId(), index: getHistoryState().index },\n    null,\n    url,\n  ) // QA: won't the fallback overwrite the `id`? Yes, but the fallback doesn't use the `id` :)\n\nexport const go = (n) => window.history.go(n)\n\nexport const getCurrentIndex = () => getHistoryState().index\n\nconst historySet = (history) => window.history.replaceState(history, null) // set on current entry\n\n// SESSION STORAGE FACADE:\n\n// We use `history.state.id` to pick which \"session\" from `sessionStorage` to use in\n// the case that multiple instances of the app exist in the browser history stack of\n// the same tab (e.g. if you navigate away from the app and then back again)\nlet _id\n\nconst PREFIX = '@@rudy/'\n\nconst sessionId = () => (_id = _id || createSessionId())\n\nconst key = () => PREFIX + sessionId()\n\nconst createSessionId = () => {\n  const state = getHistoryState()\n\n  if (!state.id) {\n    if (process.env.NODE_ENV === 'test') {\n      state.id = '123456789'.toString(36).substr(2, 6)\n    } else {\n      state.id = Math.random()\n        .toString(36)\n        .substr(2, 6)\n    }\n    state.index = 0\n    historySet(state)\n  }\n\n  return state.id\n}\n\n// HELPERS:\n\nconst initializeHistory = () => {\n  const { pathname, search, hash } = window.location\n  const url = pathname + search + hash\n  return { n: 1, index: 0, entries: [url] } // default history on first load\n}\n\nconst format = (history, api) => {\n  const { entries, index } = history\n  return toEntries(api, entries, index)\n}\n\n// IE11 sometimes throws when accessing `history.state`:\n//\n// - https://github.com/ReactTraining/history/pull/289\n// - https://github.com/ReactTraining/history/pull/230#issuecomment-193555362\n//\n// The issue occurs:\n// A) when you refresh a page that is the only entry and never had state set on it,\n// which means it wouldn't have any state to remember in the first place\n//\n// B) in IE11 on load in iframes, which also won't need to remember state, as iframes\n// usually aren't for navigating to other sites (and back). This may just be issue A)\nconst getHistoryState = () => {\n  try {\n    return window.history.state || {}\n  } catch (e) {\n    return {}\n  }\n}\n"],"file":"sessionStorage.js"}