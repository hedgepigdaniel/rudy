{"version":3,"sources":["../../src/core/compose.js"],"names":["middlewares","curryArg","killOnRedirect","pipeline","map","middleware","req","index","result","dispatch","i","redirect","undefined","ret","Promise","resolve","tmp","canceled","history","action","reject","Error","fn","next","args","prom","then","res","_dispatched","committed","newRequestCameIn","ctx","pending","revertPop","err"],"mappings":"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","sourcesContent":["// @flow\nimport type { ComposeCurryArgs } from '../flow-types'\n\nexport default (\n  middlewares: Function | Array<Function>,\n  curryArg: ComposeCurryArgs,\n  killOnRedirect: boolean = false,\n) => {\n  if (typeof middlewares === 'function') {\n    return middlewares(curryArg, killOnRedirect) // accept custom function to do compose work below\n  }\n\n  const pipeline = curryArg\n    ? middlewares.map((middleware) => middleware(curryArg))\n    : middlewares\n\n  return (req: Object): Promise<any> => {\n    let index = -1 // last called middleware #\n    let result\n\n    return dispatch(0)\n\n    function dispatch(i, ...args) {\n      if (req.redirect !== undefined && killOnRedirect) {\n        // short-circuit, dont call next middleware\n        const ret = i === 0 && result !== undefined ? result : false\n        return Promise.resolve(ret)\n      }\n\n      if (req.tmp.canceled) {\n        // if a new request comes in before this one commits/enters, cancel it by not calling next middleware\n        const ret = i === 0 && result !== undefined ? result : false\n        req.history.canceled = req.action\n        return Promise.resolve(ret) // short-circuit, dont call next middleware\n      }\n\n      // start standard work:\n\n      if (i <= index) {\n        return Promise.reject(new Error('next() called multiple times'))\n      }\n\n      index = i\n      const fn = pipeline[i]\n\n      if (!fn) return Promise.resolve(result)\n\n      try {\n        const next = (...args) => Promise.resolve(dispatch(i + 1, ...args))\n        const prom = Promise.resolve(fn(req, next, ...args)) // insure middleware is a promise\n\n        return prom.then((res) => {\n          if (res) {\n            delete res._dispatched // delete these temporary flags so user doesn't see them (used for `autoDispatch` feature)\n          }\n\n          // return value of redirect (resolution of next pipeline), but if value returned from callback, return that instead\n          if (req.redirect !== undefined && killOnRedirect) {\n            return (result =\n              result !== undefined\n                ? result // as below in the standard use-case, this insures last middleware dictates return\n                : res === req.action\n                ? req.redirect // `transformAction` + `enter` middleware return original action dispatched, but we never want to return that value of the action redirected from\n                : res !== undefined\n                ? res\n                : req.redirect) // usually the result returned will be the result of the pipeline redirected to, but we honor explicit different returns (`res`)\n          }\n\n          // if a middleware return `false`, the pipeline is terminated and now there is no longer a \"pending\" route change\n          if (res === false && !req.tmp.committed) {\n            const newRequestCameIn = req.ctx.pending !== req\n            req.ctx.pending = newRequestCameIn ? req.ctx.pending : false // preserve potential incoming request that came in during async callback that returned false, otherwise indicate the initial request is no longer pending\n\n            // call window.history.go(-1 | 1) to go back to URL/route whose `beforeLeave` returned `false`\n            // NOTE: this is also used by redirects back to the current route (see `middleware/call/index.js`)\n            if (req.tmp.revertPop) req.tmp.revertPop()\n          }\n\n          result = result !== undefined ? result : res // insure last middleware return stays the final return of `dispatch` after chain rewinds\n          return i === 0 ? result : res // but allow middleware calls to `next` to be returned regular return of next middleware\n        })\n      } catch (err) {\n        return Promise.reject(err)\n      }\n    }\n  }\n}\n"],"file":"compose.js"}