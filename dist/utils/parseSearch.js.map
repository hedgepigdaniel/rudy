{"version":3,"sources":["../../src/utils/parseSearch.js"],"names":["search","qs","parse","decoder","str","decode","isNumber","Number","parseFloat","isNaN"],"mappings":";;;;;;;AACA;;;;eAEe,kBAACA,MAAD;AAAA,SAAoBC,YAAGC,KAAH,CAASF,MAAT,EAAiB;AAAEG,IAAAA,OAAO,EAAPA;AAAF,GAAjB,CAApB;AAAA,C;;;;AAEf,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAcC,MAAd;AAAA,SACdC,QAAQ,CAACF,GAAD,CAAR,GAAgBG,MAAM,CAACC,UAAP,CAAkBJ,GAAlB,CAAhB,GAAyCC,MAAM,CAACD,GAAD,CADjC;AAAA,CAAhB;;AAGA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACF,GAAD;AAAA,SAA0B,CAACG,MAAM,CAACE,KAAP,CAAaF,MAAM,CAACC,UAAP,CAAkBJ,GAAlB,CAAb,CAA3B;AAAA,CAAjB","sourcesContent":["// @flow\nimport qs from 'qs'\n\nexport default (search: string) => qs.parse(search, { decoder })\n\nconst decoder = (str: string, decode: Function): number =>\n  isNumber(str) ? Number.parseFloat(str) : decode(str)\n\nconst isNumber = (str: string): boolean => !Number.isNaN(Number.parseFloat(str))\n"],"file":"parseSearch.js"}