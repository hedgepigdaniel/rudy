{"version":3,"sources":["../../src/middleware/serverRedirect.js"],"names":["api","req","next","action","url","location","status","ctx","serverRedirect"],"mappings":";;;;;;;AACA;;AACA;;eAGe,kBAACA,GAAD;AAAA,SAAmB,UAACC,GAAD,EAAcC,IAAd,EAAiC;AACjE,QAAI,0BAAc,wBAAWD,GAAG,CAACE,MAAf,CAAlB,EAA0C;AAAA,UAChCA,MADgC,GACrBF,GADqB,CAChCE,MADgC;;AAAA,yBAExB,yBAAYA,MAAZ,EAAoBH,GAApB,CAFwB;AAAA,UAEhCI,GAFgC,gBAEhCA,GAFgC;;AAIxCD,MAAAA,MAAM,CAACC,GAAP,GAAaD,MAAM,CAACE,QAAP,CAAgBD,GAAhB,GAAsBA,GAAnC;AACAD,MAAAA,MAAM,CAACG,MAAP,GAAgBH,MAAM,CAACE,QAAP,CAAgBC,MAAhB,IAA0B,GAA1C,CALwC,CAOxC;AACA;;AACAL,MAAAA,GAAG,CAACM,GAAJ,CAAQC,cAAR,GAAyB,IAAzB;AAEA,aAAOL,MAAP;AACD;;AAED,WAAOD,IAAI,EAAX;AACD,GAhBc;AAAA,C","sourcesContent":["// @flow\nimport { isServer } from '@respond-framework/utils'\nimport { isRedirect, actionToUrl } from '../utils'\nimport type { Redirect } from '../flow-types'\n\nexport default (api: Redirect) => (req: Object, next: Function) => {\n  if (isServer() && isRedirect(req.action)) {\n    const { action } = req\n    const { url } = actionToUrl(action, api)\n\n    action.url = action.location.url = url\n    action.status = action.location.status || 302\n\n    // account for anonymous thunks potentially redirecting without returning itself\n    // and not able to be discovered by regular means in `utils/createRequest.js`\n    req.ctx.serverRedirect = true\n\n    return action\n  }\n\n  return next()\n}\n"],"file":"serverRedirect.js"}