{"version":3,"sources":["../../../../src/middleware/transformAction/utils/formatAction.js"],"names":["isRedirect","actionToUrl","nestAction","replacePopAction","findNeighboringN","req","action","history","prevRoute","getLocation","tmp","commitHistory","url","location","state","redirect","redirectCommitted","committed","from","load","status","curr","method","info","n","commit","prev","undefined"],"mappings":";;;;AAAA,SAASA,UAAT,EAAqBC,WAArB,EAAkCC,UAAlC,QAAoD,gBAApD;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,QAAmD,SAAnD;AAEA,gBAAe,UAACC,GAAD,EAAS;AAAA,MACdC,MADc,GACmCD,GADnC,CACdC,MADc;AAAA,MACNC,OADM,GACmCF,GADnC,CACNE,OADM;AAAA,MACGC,SADH,GACmCH,GADnC,CACGG,SADH;AAAA,MACcC,WADd,GACmCJ,GADnC,CACcI,WADd;AAAA,MAC2BC,GAD3B,GACmCL,GADnC,CAC2BK,GAD3B;;AAAA,aAEC,CAACL,GAAG,CAACM,aAAL,GACnBV,WAAW,CAACK,MAAD,EAASD,GAAT,EAAcG,SAAd,CADQ,GAEnB;AAAEI,IAAAA,GAAG,EAAEN,MAAM,CAACO,QAAP,CAAgBD,GAAvB;AAA4BE,IAAAA,KAAK,EAAER,MAAM,CAACQ;AAA1C,GAJkB;AAAA,MAEdF,GAFc,QAEdA,GAFc;AAAA,MAETE,KAFS,QAETA,KAFS;;AAMtB,MAAMC,QAAQ,GAAGf,UAAU,CAACM,MAAD,CAA3B;AACA,MAAMU,iBAAiB,GAAGD,QAAQ,KAAKL,GAAG,CAACO,SAAJ,IAAiB,CAACP,GAAG,CAACQ,IAAtB,IAA8BR,GAAG,CAACS,IAAvC,CAAlC,CAPsB,CAOyD;;AAC/E,MAAMC,MAAM,GAAGd,MAAM,CAACO,QAAP,IAAmBP,MAAM,CAACO,QAAP,CAAgBO,MAAlD;AACA,MAAMC,IAAI,GAAGZ,WAAW,EAAxB;AAEA,MAAIa,MAAM,GAAGN,iBAAiB,GAAG,SAAH,GAAe,MAA7C,CAXsB,CAW8B;;AACpD,MAAIO,IAAJ;AACA,MAAIC,CAAJ;;AAEA,MAAI,CAACd,GAAG,CAACO,SAAL,IAAkBP,GAAG,CAACQ,IAAtB,KAA+BM,CAAC,GAAGpB,gBAAgB,CAACM,GAAG,CAACQ,IAAL,EAAWG,IAAX,CAAnD,CAAJ,EAA0E;AACxEC,IAAAA,MAAM,GAAG,YAAT;AACAC,IAAAA,IAAI,GAAGpB,gBAAgB,CAACqB,CAAD,EAAIZ,GAAJ,EAASS,IAAT,EAAeX,GAAf,CAAvB;AACD;;AAED,MAAI,CAACL,GAAG,CAACM,aAAL,IAAsBW,MAAM,KAAK,YAArC,EAAmD;AAAA,0BACnBf,OAAO,CAACe,MAAD,CAAP,CAAgBV,GAAhB,EAAqBE,KAArB,EAA4B,KAA5B,EAAmCS,IAAnC,CADmB;AAAA,QACzCE,MADyC,mBACzCA,MADyC;AAAA,QAC9BnB,OAD8B,0DACsB;;;AACvED,IAAAA,GAAG,CAACM,aAAJ,GAAoBc,MAApB,CAFiD,CAEtB;;AAC3BpB,IAAAA,GAAG,CAACC,MAAJ,GAAaA,OAAb;AACD,GAxBqB,CA0BtB;;;AACA,MAAMoB,IAAI,GACRrB,GAAG,CAACC,MAAJ,CAAWoB,IAAX,KAAoBhB,GAAG,CAACS,IAAJ,IAAYH,iBAAZ,GAAgCK,IAAI,CAACK,IAArC,GAA4CL,IAAhE,CADF,CA3BsB,CA4BkD;;AACxE,MAAMH,IAAI,GAAGb,GAAG,CAACC,MAAJ,CAAWY,IAAX,KAAoBH,QAAQ,GAAGL,GAAG,CAACQ,IAAJ,IAAYG,IAAf,GAAsBM,SAAlD,CAAb,CA7BsB,CA6BoD;;AAE1E,SAAOzB,UAAU,CAACG,GAAG,CAACC,MAAL,EAAaoB,IAAb,EAAmBR,IAAnB,EAAyBE,MAAzB,EAAiCV,GAAjC,CAAjB;AACD,CAhCD","sourcesContent":["import { isRedirect, actionToUrl, nestAction } from '../../../utils'\nimport { replacePopAction, findNeighboringN } from './index'\n\nexport default (req) => {\n  const { action, history, prevRoute, getLocation, tmp } = req\n  const { url, state } = !req.commitHistory\n    ? actionToUrl(action, req, prevRoute)\n    : { url: action.location.url, state: action.state }\n\n  const redirect = isRedirect(action)\n  const redirectCommitted = redirect && (tmp.committed || !tmp.from || tmp.load) // committed after `enter`, or if a redirect triggered from outside the pipeline, or on load where it must always be treated as a `replace` since the URL is already settled\n  const status = action.location && action.location.status\n  const curr = getLocation()\n\n  let method = redirectCommitted ? 'replace' : 'push' // redirects before committing are just pushes (since the original route was never pushed)\n  let info\n  let n\n\n  if (!tmp.committed && tmp.from && (n = findNeighboringN(tmp.from, curr))) {\n    method = 'replacePop'\n    info = replacePopAction(n, url, curr, tmp)\n  }\n\n  if (!req.commitHistory || method === 'replacePop') {\n    const { commit, ...action } = history[method](url, state, false, info) // get returned the same action as functions passed to `history.listen`\n    req.commitHistory = commit // put this here so `enter` middleware can commit the history, etc\n    req.action = action\n  }\n\n  // reset + jump actions provide custom `prev/from`\n  const prev =\n    req.action.prev || (tmp.load || redirectCommitted ? curr.prev : curr) // `init` comes before initial `load` action, but they share the same `prev` state, as they are essentially the same, except the former is the initial state before any actions are dispatched; -- about `prev` vs `from`: `prev` maintains proper entries array, notwithstanding any redirects, whereas `from` honors where the user tried to go, but never became the location state\n  const from = req.action.from || (redirect ? tmp.from || curr : undefined) // `from` represents the route the user would have gone to had there been no redirect; `curr` used when redirect comes from outside of pipeline via `redirect` action creator\n\n  return nestAction(req.action, prev, from, status, tmp)\n}\n"],"file":"formatAction.js"}