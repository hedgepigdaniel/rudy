{"version":3,"sources":["../../src/utils/actionToUrl.test.js"],"names":["actionToUrl","defaultToPath","describe","NOT_FOUND","ROOT","STATIC","UNNAMED_PARAM","SINGLE_PARAM","OPTIONAL_PARAM","MULTIPLE_PARAMS","OPTIONAL_PATH_PARAM","COMPULSORY_PATH_PARAM","MULTI_MULTI_PARAM","routes","path","api","options","toPath","val","fromPath","assertUrlForAction","action","url","expect","toEqual","state","assertErrorForAction","toThrow","it","type","params","undefined","param","p1","p2","p","checkToPath","succeed","value","repeat","optional","convertNumbers","capitalizedWords","result","label","Array","isArray","toString","repeatValues","filter","optionalValues","convertNumbersValues","capitalizeWordsValues","forEach","r","o","w","n","name"],"mappings":"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","sourcesContent":["// @flow\nimport actionToUrl, { defaultToPath } from './actionToUrl'\n\ndescribe('Serializes params', () => {\n  const NOT_FOUND = 'NOT_FOUND'\n  const ROOT = 'ROOT'\n  const STATIC = 'STATIC'\n  const UNNAMED_PARAM = 'UNNAMED_PARAM'\n  const SINGLE_PARAM = 'SINGLE_PARAM'\n  const OPTIONAL_PARAM = 'OPTIONAL_PARAM'\n  const MULTIPLE_PARAMS = 'MULTIPLE_PARAMS'\n  const OPTIONAL_PATH_PARAM = 'OPTIONAL_PATH_PARAM'\n  const COMPULSORY_PATH_PARAM = 'COMPULSORY_PATH_PARAM'\n  const MULTI_MULTI_PARAM = 'MULTI_MULTI_PARAM'\n  const routes = {\n    [NOT_FOUND]: {\n      path: '/404',\n    },\n    [ROOT]: {\n      path: '/',\n    },\n    [STATIC]: {\n      path: '/static',\n    },\n    [UNNAMED_PARAM]: {\n      path: '/unnamed(.*)',\n    },\n    [SINGLE_PARAM]: {\n      path: '/compulsory/:param',\n    },\n    [OPTIONAL_PARAM]: {\n      path: '/optional/:param?',\n    },\n    [MULTIPLE_PARAMS]: {\n      path: '/multiple/:p1/:p2',\n    },\n    [OPTIONAL_PATH_PARAM]: {\n      path: '/multistar/:p*',\n    },\n    [COMPULSORY_PATH_PARAM]: {\n      path: '/multiplus/:p+',\n    },\n    [MULTI_MULTI_PARAM]: {\n      path: '/multimulti/:p1*/separator/:p2+',\n    },\n  }\n  const api = {\n    routes,\n    options: {\n      toPath: (val) => val,\n      fromPath: (val) => val,\n    },\n  }\n  const assertUrlForAction = (action, url) =>\n    expect(actionToUrl(action, api)).toEqual({\n      url,\n      state: {},\n    })\n\n  const assertErrorForAction = (action) =>\n    expect(() => actionToUrl(action, api)).toThrow()\n\n  it('Static path', () => {\n    assertUrlForAction({ type: ROOT }, '/')\n    assertUrlForAction({ type: STATIC }, '/static')\n  })\n\n  it('Single compulsory unnamed parameter', () => {\n    assertUrlForAction({ type: UNNAMED_PARAM }, '/404')\n\n    assertErrorForAction({ type: UNNAMED_PARAM, params: { '0': null } })\n\n    assertErrorForAction({ type: UNNAMED_PARAM, params: { '0': undefined } })\n\n    assertUrlForAction({ type: UNNAMED_PARAM, params: { '0': '' } }, '/unnamed')\n\n    assertUrlForAction(\n      { type: UNNAMED_PARAM, params: { '0': 'apple' } },\n      '/unnamedapple',\n    )\n  })\n\n  it('Single compulsory parameter', () => {\n    assertUrlForAction({ type: SINGLE_PARAM }, '/404')\n\n    assertErrorForAction({ type: SINGLE_PARAM, params: { param: null } })\n\n    assertErrorForAction({ type: SINGLE_PARAM, params: { param: undefined } })\n\n    assertUrlForAction({ type: SINGLE_PARAM, params: { param: '' } }, '/404')\n\n    assertUrlForAction(\n      { type: SINGLE_PARAM, params: { param: 'apple' } },\n      '/compulsory/apple',\n    )\n  })\n\n  it('Single optional parameter', () => {\n    assertUrlForAction({ type: OPTIONAL_PARAM }, '/optional')\n\n    assertErrorForAction({ type: OPTIONAL_PARAM, params: { param: null } })\n\n    assertUrlForAction(\n      { type: OPTIONAL_PARAM, params: { param: undefined } },\n      '/optional',\n    )\n\n    assertUrlForAction(\n      { type: OPTIONAL_PARAM, params: { param: 'test' } },\n      '/optional/test',\n    )\n  })\n\n  it('Multiple parameters', () => {\n    assertUrlForAction({ type: MULTIPLE_PARAMS, params: {} }, '/404')\n\n    assertUrlForAction({ type: MULTIPLE_PARAMS, params: { p1: '1' } }, '/404')\n\n    assertUrlForAction(\n      { type: MULTIPLE_PARAMS, params: { p1: '1', p2: '2' } },\n      '/multiple/1/2',\n    )\n  })\n\n  it('Multi segment optional parameter', () => {\n    assertUrlForAction({ type: OPTIONAL_PATH_PARAM }, '/multistar')\n\n    assertErrorForAction({\n      type: OPTIONAL_PATH_PARAM,\n      params: { p: undefined },\n    })\n\n    assertErrorForAction({ type: OPTIONAL_PATH_PARAM, params: { p: null } })\n\n    assertErrorForAction({ type: OPTIONAL_PATH_PARAM, params: { p: '' } })\n\n    assertUrlForAction(\n      { type: OPTIONAL_PATH_PARAM, params: { p: [] } },\n      '/multistar',\n    )\n\n    assertUrlForAction(\n      { type: OPTIONAL_PATH_PARAM, params: { p: ['single'] } },\n      '/multistar/single',\n    )\n\n    assertUrlForAction(\n      { type: OPTIONAL_PATH_PARAM, params: { p: ['one', 'two', 'three'] } },\n      '/multistar/one/two/three',\n    )\n  })\n\n  it('Multi segment compulsory parameter', () => {\n    assertErrorForAction({\n      type: COMPULSORY_PATH_PARAM,\n      params: { p: undefined },\n    })\n\n    assertErrorForAction({ type: COMPULSORY_PATH_PARAM, params: { p: null } })\n\n    assertErrorForAction({ type: COMPULSORY_PATH_PARAM, params: { p: [] } })\n\n    assertUrlForAction(\n      { type: COMPULSORY_PATH_PARAM, params: { p: ['one'] } },\n      '/multiplus/one',\n    )\n\n    assertUrlForAction(\n      { type: COMPULSORY_PATH_PARAM, params: { p: ['one', 'two'] } },\n      '/multiplus/one/two',\n    )\n  })\n\n  it('Multiple multi segment params', () => {\n    assertUrlForAction({ type: MULTI_MULTI_PARAM, params: {} }, '/404')\n\n    assertErrorForAction({ type: MULTI_MULTI_PARAM, params: { p1: 'one' } })\n\n    assertUrlForAction(\n      { type: MULTI_MULTI_PARAM, params: { p2: ['one'] } },\n      '/multimulti/separator/one',\n    )\n\n    assertUrlForAction(\n      { type: MULTI_MULTI_PARAM, params: { p2: ['one', 'two'] } },\n      '/multimulti/separator/one/two',\n    )\n\n    assertUrlForAction(\n      {\n        type: MULTI_MULTI_PARAM,\n        params: { p1: ['one', 'two'], p2: ['three', 'four'] },\n      },\n      '/multimulti/one/two/separator/three/four',\n    )\n  })\n})\n\ndescribe('defaultToPath', () => {\n  const checkToPath = (\n    succeed = true,\n    value,\n    {\n      repeat,\n      optional,\n      convertNumbers,\n      capitalizedWords,\n    }: {\n      repeat?: boolean,\n      optional?: boolean,\n      convertNumbers?: boolean,\n      capitalizedWords?: boolean,\n    } = {},\n    result,\n  ) => {\n    let label\n    if (value === undefined) {\n      label = 'undefined'\n    } else if (value === null) {\n      label = 'null'\n    } else if (Array.isArray(value)) {\n      label = '[Array]'\n    } else if (typeof value === 'object') {\n      label = '{Object}'\n    } else if (typeof value === 'string') {\n      label = `'${value}'`\n    } else if (typeof value === 'number') {\n      label = value.toString()\n    } else {\n      label = '<unknown>'\n    }\n\n    const repeatValues = [true, false].filter((val) => !val !== repeat)\n    const optionalValues = [true, false].filter((val) => !val !== optional)\n    const convertNumbersValues = [true, false].filter(\n      (val) => !val !== convertNumbers,\n    )\n    const capitalizeWordsValues = [true, false].filter(\n      (val) => !val !== capitalizedWords,\n    )\n\n    repeatValues.forEach((r) => {\n      optionalValues.forEach((o) => {\n        capitalizeWordsValues.forEach((w) => {\n          convertNumbersValues.forEach((n) =>\n            it(`defaultToPath(${label}, { name: 'test', repeat: ${\n              repeat ? 'true' : 'false'\n            }, optional: ${optional ? 'true' : 'false'} }, { convertNumbers: ${\n              n ? 'true' : 'false'\n            }, capitalizedWords: ${w ? 'true' : 'false'} })`, () =>\n              succeed\n                ? expect(\n                    defaultToPath(\n                      value,\n                      { name: 'test', optional: o, repeat: r },\n                      { convertNumbers: n, capitalizedWords: w },\n                      {},\n                    ),\n                  ).toEqual(result)\n                : expect(() =>\n                    defaultToPath(\n                      value,\n                      { name: 'test', optional: o, repeat: r },\n                      { convertNumbers: n, capitalizedWords: w },\n                      {},\n                    ),\n                  ).toThrow()),\n          )\n        })\n      })\n    })\n  }\n\n  // undefined allowed for optional params\n  checkToPath(true, undefined, { optional: true, repeat: true }, [])\n  checkToPath(true, undefined, { optional: true, repeat: false }, undefined)\n  checkToPath(false, undefined, { optional: false })\n\n  // Values never allowed (they would break the symmetry of fromPath/toPath)\n  checkToPath(false, '', { repeat: true })\n  checkToPath(false, '', { repeat: false, optional: true })\n  checkToPath(false, null)\n  checkToPath(false, true)\n  checkToPath(false, false)\n  checkToPath(false, [])\n  checkToPath(false, {})\n\n  // convertNumbers\n  checkToPath(false, 0, { repeat: true })\n  checkToPath(false, 0, { convertNumbers: false })\n  checkToPath(true, 0, { repeat: false, convertNumbers: true }, '0')\n  checkToPath(true, 1, { repeat: false, convertNumbers: true }, '1')\n  checkToPath(true, 3.141, { repeat: false, convertNumbers: true }, '3.141')\n\n  // Strings\n  checkToPath(true, 'simple', { repeat: false }, 'simple')\n  checkToPath(true, 'simple', { repeat: true }, ['simple'])\n  checkToPath(true, 'path/param', { repeat: false }, 'path/param')\n  checkToPath(true, 'path/param', { repeat: true }, ['path', 'param'])\n  checkToPath(true, 'path%2fparam', { repeat: false }, 'path%2fparam')\n  checkToPath(true, 'path%2fparam', { repeat: true }, ['path%2fparam'])\n\n  // capitalizedWords\n  checkToPath(\n    true,\n    'Daniel Playfair Cal',\n    { capitalizedWords: true, repeat: false },\n    'daniel-playfair-cal',\n  )\n  checkToPath(\n    true,\n    'Daniel Playfair Cal',\n    { capitalizedWords: false, repeat: false },\n    'Daniel Playfair Cal',\n  )\n  checkToPath(true, 'Daniel Playfair Cal', { repeat: true }, [\n    'Daniel Playfair Cal',\n  ])\n})\n"],"file":"actionToUrl.test.js"}