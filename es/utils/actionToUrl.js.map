{"version":3,"sources":["../../src/utils/actionToUrl.js"],"names":["pathToRegexp","applyStringDefault","applyObjectDefault","compileUrl","cleanBasename","action","api","prevRoute","routes","opts","options","type","params","query","state","hash","basename","route","path","p","formatParams","q","formatQuery","s","formatState","h","formatHash","bn","isWrongBasename","basenames","includes","_emptyBn","Error","pathname","url","e","process","env","NODE_ENV","console","error","log","base","notFoundUrl","defaultParams","keys","newParams","toPath","defaultToPath","forEach","name","repeat","optional","Object","prototype","hasOwnProperty","call","val","urlVal","toString","Array","isArray","length","segment","undefined","toSegment","convertNum","capitalize","TypeError","replace","toLowerCase","convertNumbers","capitalizedWords","split","defaultQuery","to","toSearch","newQuery","key","defaultHash","toHash","defaultState","hasScene","indexOf","scene","t","NOT_FOUND","stringifyQuery"],"mappings":";;AACA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,iBAAvD;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,SAA1C;AAUA,gBAAe,UACbC,MADa,EAEbC,GAFa,EAGbC,SAHa,EAIF;AAAA,MACHC,MADG,GAC+BF,GAD/B,CACHE,MADG;AAAA,MACcC,IADd,GAC+BH,GAD/B,CACKI,OADL;AAAA,MAEHC,IAFG,GAE4DN,MAF5D,CAEHM,IAFG;AAAA,MAEGC,MAFH,GAE4DP,MAF5D,CAEGO,MAFH;AAAA,MAEWC,KAFX,GAE4DR,MAF5D,CAEWQ,KAFX;AAAA,MAEkBC,KAFlB,GAE4DT,MAF5D,CAEkBS,KAFlB;AAAA,MAEyBC,IAFzB,GAE4DV,MAF5D,CAEyBU,IAFzB;AAAA,MAE+BC,QAF/B,GAE4DX,MAF5D,CAE+BW,QAF/B;AAIX,MAAMC,KAAK,GAAGT,MAAM,CAACG,IAAD,CAAN,IAAgB,EAA9B;AACA,MAAMO,IAAmB,GAAG,QAAOD,KAAP,MAAiB,QAAjB,GAA4BA,KAAK,CAACC,IAAlC,GAAyCD,KAArE;AAEA,MAAME,CAAS,GAAGC,YAAY,CAACR,MAAD,EAASK,KAAT,EAAgBR,IAAhB,CAAZ,IAAqC,EAAvD;AACA,MAAMY,CAAU,GAAGC,WAAW,CAACT,KAAD,EAAQI,KAAR,EAAeR,IAAf,CAA9B;AACA,MAAMc,CAAS,GAAGC,WAAW,CAACV,KAAD,EAAQG,KAAR,EAAeR,IAAf,CAAX,IAAmC,EAArD;AACA,MAAMgB,CAAS,GAAGC,UAAU,CAACX,IAAI,IAAI,EAAT,EAAaE,KAAb,EAAoBR,IAApB,CAA5B;AAEA,MAAMkB,EAAE,GAAGvB,aAAa,CAACY,QAAD,CAAxB;AACA,MAAMY,eAAe,GAAGD,EAAE,IAAI,CAAClB,IAAI,CAACoB,SAAL,CAAeC,QAAf,CAAwBH,EAAxB,CAA/B;AACA,MAAIX,QAAQ,KAAK,EAAjB,EAAqBO,CAAC,CAACQ,QAAF,GAAa,IAAb,CAdV,CAc4B;;AAEvC,MAAI;AACF,QAAIH,eAAJ,EAAqB;AACnB,YAAM,IAAII,KAAJ,6BAA8BL,EAA9B,iCAAN;AACD,KAHC,CAKF;;;AACA,QAAMM,QAAgB,GAAG9B,UAAU,CAACe,IAAD,EAAOC,CAAP,EAAUE,CAAV,EAAaI,CAAb,EAAgBR,KAAhB,EAAuBR,IAAvB,CAAV,IAA0C,GAAnE;AACA,QAAMyB,GAAW,GAAGP,EAAE,GAAGM,QAAzB;AAEA,WAAO;AAAEC,MAAAA,GAAG,EAAHA,GAAF;AAAOpB,MAAAA,KAAK,EAAES;AAAd,KAAP;AACD,GAVD,CAUE,OAAOY,CAAP,EAAU;AACV,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1C;AACAC,MAAAA,OAAO,CAACC,KAAR,6CACsC7B,IADtC,gBAEEN,MAFF,EAGE8B,CAHF;AAKD,KAPD,MAOO,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AAC1C;AACAC,MAAAA,OAAO,CAACE,GAAR,6CAAgD9B,IAAhD,gBAAgEN,MAAhE,EAAwE8B,CAAxE;AACD;;AAED,QAAMO,IAAY,GAAGd,eAAe,GAAG,EAAH,GAAQD,EAA5C;;AACA,QAAMO,IAAW,GACfQ,IAAI,GAAGC,WAAW,CAACtC,MAAD,EAASG,MAAT,EAAiBC,IAAjB,EAAuBY,CAAvB,EAA0BI,CAA1B,EAA6BlB,SAA7B,CADpB;;AAEA,WAAO;AAAE2B,MAAAA,GAAG,EAAHA,IAAF;AAAOpB,MAAAA,KAAK,EAAES;AAAd,KAAP;AACD;AACF,CAhDD;;AAkDA,IAAMH,YAAY,GAAG,SAAfA,YAAe,CACnBR,MADmB,EAEnBK,KAFmB,EAGnBR,IAHmB,EAIL;AACdG,EAAAA,MAAM,GAAGV,kBAAkB,CAACe,KAAK,CAAC2B,aAAN,IAAuBnC,IAAI,CAACmC,aAA7B,CAAlB,CACPhC,MADO,EAEPK,KAFO,EAGPR,IAHO,CAAT;;AAMA,MAAIG,MAAJ,EAAY;AACV,QAAMiC,IAAI,GAAG,EAAb;AACA7C,IAAAA,YAAY,CAAC,OAAOiB,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAACC,IAA3C,EAAiD2B,IAAjD,CAAZ;AACA,QAAMC,SAAa,GAAG,EAAtB;AACA,QAAMC,MAAc,GAAG9B,KAAK,CAAC8B,MAAN,IAAgBtC,IAAI,CAACsC,MAArB,IAA+BC,aAAtD;AACAH,IAAAA,IAAI,CAACI,OAAL,CACE,gBAQM;AAAA,UAPJC,IAOI,QAPJA,IAOI;AAAA,UANJC,MAMI,QANJA,MAMI;AAAA,UALJC,QAKI,QALJA,QAKI;;AACJ,UAAI,CAACC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC5C,MAArC,EAA6CsC,IAA7C,CAAL,EAAyD;AACvD;AACD,OAHG,CAIJ;;;AACA,UAAMO,GAAG,GAAG7C,MAAM,CAACsC,IAAD,CAAlB;AACA,UAAMQ,MAAM,GAAGX,MAAM,CACnBU,GADmB,EAEnB;AAAEP,QAAAA,IAAI,EAAEA,IAAI,CAACS,QAAL,EAAR;AAAyBR,QAAAA,MAAM,EAANA,MAAzB;AAAiCC,QAAAA,QAAQ,EAARA;AAAjC,OAFmB,EAGnBnC,KAHmB,EAInBR,IAJmB,CAArB;;AAMA,UAAI0C,MAAJ,EAAY;AACV,YAAI,CAACS,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAL,EAA4B;AAC1B,gBAAM1B,KAAK,CAAC,eAAD,CAAX;AACD;;AACD,YAAI,CAACoB,QAAD,IAAa,CAACM,MAAM,CAACI,MAAzB,EAAiC;AAC/B,gBAAM9B,KAAK,CAAC,eAAD,CAAX;AACD;;AACD0B,QAAAA,MAAM,CAACT,OAAP,CAAe,UAACc,OAAD,EAAa;AAC1B,cAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+B,CAACA,OAApC,EAA6C;AAC3C,kBAAM/B,KAAK,CAAC,eAAD,CAAX;AACD;AACF,SAJD;AAKD,OAZD,MAYO,IACL,OAAO0B,MAAP,KAAkB,QAAlB,KACC,CAACN,QAAD,IAAaM,MAAM,KAAKM,SADzB,CADK,EAGL;AACA,cAAMhC,KAAK,CAAC,eAAD,CAAX;AACD;;AACDc,MAAAA,SAAS,CAACI,IAAI,CAACS,QAAL,EAAD,CAAT,GAA6BD,MAA7B;AACD,KAxCH;AA0CA,WAAOZ,SAAP;AACD;;AACD,SAAOkB,SAAP;AACD,CA7DD;;AA+DA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACR,GAAD,EAAMS,UAAN,EAAkBC,UAAlB,EAA8Bf,QAA9B,EAA2C;AAC3D,MAAI,OAAOK,GAAP,KAAe,QAAf,IAA2BS,UAA/B,EAA2C;AACzC,WAAOT,GAAG,CAACE,QAAJ,EAAP;AACD;;AACD,MAAI,OAAOF,GAAP,KAAe,QAAf,IAA4BL,QAAQ,IAAI,CAACK,GAA7C,EAAmD;AACjD,UAAMW,SAAS,CAAC,wDAAD,CAAf;AACD;;AACD,MAAID,UAAJ,EAAgB;AACd,WAAOV,GAAG,CAACY,OAAJ,CAAY,IAAZ,EAAkB,GAAlB,EAAuBC,WAAvB,EAAP;AACD;;AACD,SAAOb,GAAP;AACD,CAXD;;AAaA,OAAO,IAAMT,aAAqB,GAAG,SAAxBA,aAAwB,CACnCS,GADmC,SAGnCxC,KAHmC,EAInCR,IAJmC,EAKhC;AAAA,MAHD0C,MAGC,SAHDA,MAGC;AAAA,MAHOC,QAGP,SAHOA,QAGP;AACH,MAAMc,UAAU,GACdjD,KAAK,CAACsD,cAAN,IACC9D,IAAI,CAAC8D,cAAL,IAAuBtD,KAAK,CAACsD,cAAN,KAAyB,KAFnD;AAIA,MAAMJ,UAAU,GACdlD,KAAK,CAACuD,gBAAN,IACC/D,IAAI,CAAC+D,gBAAL,IAAyBvD,KAAK,CAACuD,gBAAN,KAA2B,KAFvD;;AAIA,MAAIrB,MAAJ,EAAY;AACV,QAAIC,QAAQ,IAAIK,GAAG,KAAKO,SAAxB,EAAmC;AACjC,aAAO,EAAP;AACD;;AACD,QAAI,CAACP,GAAL,EAAU;AACR,YAAMzB,KAAK,CAAC,wCAAD,CAAX;AACD;;AACD,WAAOyB,GAAG,CAACgB,KAAJ,CAAU,GAAV,CAAP;AACD;;AACD,MAAIrB,QAAQ,IAAIK,GAAG,KAAKO,SAAxB,EAAmC;AACjC,WAAOA,SAAP;AACD;;AACD,SAAOC,SAAS,CAACR,GAAD,EAAMS,UAAN,EAAkBC,UAAlB,EAA8Bf,QAA9B,CAAhB;AACD,CA3BM;AA6BP,OAAO,IAAM9B,WAAW,GAAG,SAAdA,WAAc,CACzBT,KADyB,EAEzBI,KAFyB,EAGzBR,IAHyB,EAIb;AACZI,EAAAA,KAAK,GAAGX,kBAAkB,CAACe,KAAK,CAACyD,YAAN,IAAsBjE,IAAI,CAACiE,YAA5B,CAAlB,CACN7D,KADM,EAENI,KAFM,EAGNR,IAHM,CAAR;AAKA,MAAMkE,EAAE,GAAG1D,KAAK,CAAC2D,QAAN,IAAkBnE,IAAI,CAACmE,QAAlC;;AAEA,MAAID,EAAE,IAAI9D,KAAV,EAAiB;AACf,QAAMgE,QAAQ,GAAG,EAAjB;AAEAxB,IAAAA,MAAM,CAACR,IAAP,CAAYhC,KAAZ,EAAmBoC,OAAnB,CAA2B,UAAC6B,GAAD,EAAS;AAClC;AACAD,MAAAA,QAAQ,CAACC,GAAD,CAAR,GAAgBH,EAAE,CAAC9D,KAAK,CAACiE,GAAD,CAAN,EAAaA,GAAb,EAAkB7D,KAAlB,EAAyBR,IAAzB,CAAlB;AACD,KAHD;AAKA,WAAOoE,QAAP;AACD;;AAED,SAAOhE,KAAP;AACD,CAxBM;AA0BP,OAAO,IAAMa,UAAU,GAAG,SAAbA,UAAa,CACxBX,IADwB,EAExBE,KAFwB,EAGxBR,IAHwB,EAIb;AACXM,EAAAA,IAAI,GAAGd,kBAAkB,CAACgB,KAAK,CAAC8D,WAAN,IAAqBtE,IAAI,CAACsE,WAA3B,CAAlB,CACLhE,IADK,EAELE,KAFK,EAGLR,IAHK,CAAP;AAKA,MAAMkE,EAAE,GAAG1D,KAAK,CAAC+D,MAAN,IAAgBvE,IAAI,CAACuE,MAAhC;AACA,SAAOL,EAAE,GAAGA,EAAE,CAAC5D,IAAD,EAAOE,KAAP,EAAcR,IAAd,CAAL,GAA2BM,IAApC;AACD,CAZM;;AAcP,IAAMS,WAAW,GAAG,SAAdA,WAAc,CAACV,KAAD,EAAiBG,KAAjB,EAA+BR,IAA/B;AAAA,SAClBP,kBAAkB,CAACe,KAAK,CAACgE,YAAN,IAAsBxE,IAAI,CAACwE,YAA5B,CAAlB,CACEnE,KADF,EAEEG,KAFF,EAGER,IAHF,CADkB;AAAA,CAApB,C,CAMA;;;AAEA,IAAMkC,WAAW,GAAG,SAAdA,WAAc,CAClBtC,MADkB,EAElBG,MAFkB,EAGlBC,IAHkB,EAIlBI,KAJkB,EAKlBE,IALkB,EAOP;AAAA,MADXR,SACW,uEADS,EACT;AACX,MAAMI,IAAY,GAAGN,MAAM,CAACM,IAAP,IAAe,EAApC;AACA,MAAMM,KAAS,GAAGT,MAAM,CAACG,IAAD,CAAN,IAAgB,EAAlC;AACA,MAAMuE,QAAiB,GAAGvE,IAAI,CAACwE,OAAL,CAAa,YAAb,IAA6B,CAAC,CAAxD,CAHW,CAIX;AACA;;AACA,MAAMC,KAAa,GAAGnE,KAAK,CAACmE,KAAN,IAAe7E,SAAS,CAAC6E,KAAzB,IAAkC,EAAxD;AACA,MAAMC,CAAS,GAAGH,QAAQ,GACtBvE,IADsB,GAEtBH,MAAM,WAAI4E,KAAJ,gBAAN,CAA6B;AAA7B,cACGA,KADH,kBAEA,WAJJ;AAMA,MAAMjE,CAAS,GAAGX,MAAM,CAAC6E,CAAD,CAAN,CAAUnE,IAAV,IAAkBV,MAAM,CAAC8E,SAAP,CAAiBpE,IAAnC,IAA2C,EAA7D,CAbW,CAeX;;AACA,MAAMK,CAAS,GACbV,KAAK,IAAIJ,IAAI,CAAC8E,cAAd,cAAmC9E,IAAI,CAAC8E,cAAL,CAAoB1E,KAApB,CAAnC,IAAkE,EADpE;AAEA,MAAMY,CAAS,GAAGV,IAAI,cAAOA,IAAP,IAAgB,EAAtC;AAEA,SAAOI,CAAC,GAAGI,CAAJ,GAAQE,CAAf;AACD,CA5BD","sourcesContent":["// @flow\nimport pathToRegexp from 'path-to-regexp'\nimport { applyStringDefault, applyObjectDefault } from './applyDefaults'\nimport { compileUrl, cleanBasename } from './index'\n\nimport type {\n  Route,\n  Routes,\n  ReceivedAction,\n  Options,\n  ToPath,\n} from '../flow-types'\n\nexport default (\n  action: ReceivedAction,\n  api: Object,\n  prevRoute?: string,\n): Object => {\n  const { routes, options: opts }: Object = api\n  const { type, params, query, state, hash, basename }: ReceivedAction = action\n\n  const route = routes[type] || {}\n  const path: string | void = typeof route === 'object' ? route.path : route\n\n  const p: Object = formatParams(params, route, opts) || {}\n  const q: ?Object = formatQuery(query, route, opts)\n  const s: Object = formatState(state, route, opts) || {}\n  const h: string = formatHash(hash || '', route, opts)\n\n  const bn = cleanBasename(basename)\n  const isWrongBasename = bn && !opts.basenames.includes(bn)\n  if (basename === '') s._emptyBn = true // not cool kyle\n\n  try {\n    if (isWrongBasename) {\n      throw new Error(`[rudy] basename \"${bn}\" not in options.basenames`)\n    }\n\n    // path-to-regexp throws for failed compilations\n    const pathname: string = compileUrl(path, p, q, h, route, opts) || '/'\n    const url: string = bn + pathname\n\n    return { url, state: s }\n  } catch (e) {\n    if (process.env.NODE_ENV === 'development') {\n      // eslint-disable-next-line no-console\n      console.error(\n        `[rudy] unable to compile action \"${type}\" to URL`,\n        action,\n        e,\n      )\n    } else if (process.env.NODE_ENV === 'test') {\n      // eslint-disable-next-line no-console\n      console.log(`[rudy] unable to compile action \"${type}\" to URL`, action, e)\n    }\n\n    const base: string = isWrongBasename ? '' : bn\n    const url: string =\n      base + notFoundUrl(action, routes, opts, q, h, prevRoute)\n    return { url, state: s }\n  }\n}\n\nconst formatParams = (\n  params: ?Object,\n  route: Route,\n  opts: Options,\n): void | {} => {\n  params = applyObjectDefault(route.defaultParams || opts.defaultParams)(\n    params,\n    route,\n    opts,\n  )\n\n  if (params) {\n    const keys = []\n    pathToRegexp(typeof route === 'string' ? route : route.path, keys)\n    const newParams: {} = {}\n    const toPath: ToPath = route.toPath || opts.toPath || defaultToPath\n    keys.forEach(\n      ({\n        name,\n        repeat,\n        optional,\n      }: {\n        name: string | Number,\n        repeat: boolean,\n        optional: boolean,\n      }) => {\n        if (!Object.prototype.hasOwnProperty.call(params, name)) {\n          return\n        }\n        // $FlowFixMe\n        const val = params[name]\n        const urlVal = toPath(\n          val,\n          { name: name.toString(), repeat, optional },\n          route,\n          opts,\n        )\n        if (repeat) {\n          if (!Array.isArray(urlVal)) {\n            throw Error('toPath failed')\n          }\n          if (!optional && !urlVal.length) {\n            throw Error('toPath failed')\n          }\n          urlVal.forEach((segment) => {\n            if (typeof segment !== 'string' || !segment) {\n              throw Error('toPath failed')\n            }\n          })\n        } else if (\n          typeof urlVal !== 'string' &&\n          (!optional || urlVal !== undefined)\n        ) {\n          throw Error('toPath failed')\n        }\n        newParams[name.toString()] = urlVal\n      },\n    )\n    return newParams\n  }\n  return undefined\n}\n\nconst toSegment = (val, convertNum, capitalize, optional) => {\n  if (typeof val === 'number' && convertNum) {\n    return val.toString()\n  }\n  if (typeof val !== 'string' || (optional && !val)) {\n    throw TypeError('[rudy]: defaultToPath::toSegment received unknown type')\n  }\n  if (capitalize) {\n    return val.replace(/ /g, '-').toLowerCase()\n  }\n  return val\n}\n\nexport const defaultToPath: ToPath = (\n  val,\n  { repeat, optional },\n  route,\n  opts,\n) => {\n  const convertNum =\n    route.convertNumbers ||\n    (opts.convertNumbers && route.convertNumbers !== false)\n\n  const capitalize =\n    route.capitalizedWords ||\n    (opts.capitalizedWords && route.capitalizedWords !== false)\n\n  if (repeat) {\n    if (optional && val === undefined) {\n      return []\n    }\n    if (!val) {\n      throw Error('defaultToPath received incorrect value')\n    }\n    return val.split('/')\n  }\n  if (optional && val === undefined) {\n    return undefined\n  }\n  return toSegment(val, convertNum, capitalize, optional)\n}\n\nexport const formatQuery = (\n  query: ?Object,\n  route: Route,\n  opts: Options,\n): ?Object => {\n  query = applyObjectDefault(route.defaultQuery || opts.defaultQuery)(\n    query,\n    route,\n    opts,\n  )\n  const to = route.toSearch || opts.toSearch\n\n  if (to && query) {\n    const newQuery = {}\n\n    Object.keys(query).forEach((key) => {\n      // $FlowFixMe\n      newQuery[key] = to(query[key], key, route, opts)\n    })\n\n    return newQuery\n  }\n\n  return query\n}\n\nexport const formatHash = (\n  hash: string,\n  route: Route,\n  opts: Options,\n): string => {\n  hash = applyStringDefault(route.defaultHash || opts.defaultHash)(\n    hash,\n    route,\n    opts,\n  )\n  const to = route.toHash || opts.toHash\n  return to ? to(hash, route, opts) : hash\n}\n\nconst formatState = (state: ?Object, route: Route, opts: Options): ?Object =>\n  applyObjectDefault(route.defaultState || opts.defaultState)(\n    state,\n    route,\n    opts,\n  )\n// state has no string counter part in the address bar, so there is no `toState`\n\nconst notFoundUrl = (\n  action: ReceivedAction,\n  routes: Routes,\n  opts: Options,\n  query: ?Object,\n  hash: string,\n  prevRoute: string = '',\n): string => {\n  const type: string = action.type || ''\n  const route: {} = routes[type] || {}\n  const hasScene: boolean = type.indexOf('/NOT_FOUND') > -1\n  // TODO: Look into scene stuff\n  // $FlowFixMe\n  const scene: string = route.scene || prevRoute.scene || ''\n  const t: string = hasScene\n    ? type\n    : routes[`${scene}/NOT_FOUND`] // try to interpret scene-level NOT_FOUND if available (note: links create plain NOT_FOUND actions)\n    ? `${scene}/NOT_FOUND`\n    : 'NOT_FOUND'\n\n  const p: string = routes[t].path || routes.NOT_FOUND.path || ''\n\n  // preserve these (why? because we can)\n  const s: string =\n    query && opts.stringifyQuery ? `?${opts.stringifyQuery(query)}` : ''\n  const h: string = hash ? `#${hash}` : ''\n\n  return p + s + h\n}\n"],"file":"actionToUrl.js"}